Escaped mutants:
================

1) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/CreateEmployeeActionExecutor.php:31    [M] ArrayItem

@@ @@
     {
         /** @var Employee $employee */
         $employee = $this->orchestratorHandler->handler('create-employee', $request);
-        $request->merge(['image' => $employee->image()->value()]);
+        $request->merge(['image' > $employee->image()->value()]);
         $request->merge(['employeeId' => $employee->id()->value()]);
         /** @var User $user */
         $user = $this->orchestratorHandler->handler('create-user', $request);


2) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/CreateEmployeeActionExecutor.php:32    [M] ArrayItem

@@ @@
         /** @var Employee $employee */
         $employee = $this->orchestratorHandler->handler('create-employee', $request);
         $request->merge(['image' => $employee->image()->value()]);
-        $request->merge(['employeeId' => $employee->id()->value()]);
+        $request->merge(['employeeId' > $employee->id()->value()]);
         /** @var User $user */
         $user = $this->orchestratorHandler->handler('create-user', $request);
         $employee->userId()->setValue($user->id()->value());


3) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:40    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' > $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


4) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:41    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' > $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


5) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:42    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' > $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


6) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:43    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' > $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


7) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:44    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' > $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


8) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:45    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' > $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


9) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:46    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' > $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


10) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:47    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' > $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


11) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:48    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' => $birthdate->format('Y-m-d')];
+        $dataUpdate = ['identification' => $request->input('identifier'), 'identification_type' => $request->input('typeDocument'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'observations' => $request->input('observations'), 'birthdate' > $birthdate->format('Y-m-d')];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;


12) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:55    [M] ArrayItem

@@ @@
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;
         }
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge(['dataUpdate' > json_encode($dataUpdate)]);
         /** @var Employee $employee */
         $employee = $this->orchestratorHandler->handler('update-employee', $request);
         $dataUpdateUser = ['profileId' => $request->input('profile'), 'login' => $request->input('login')];


13) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:55    [M] ArrayItemRemoval

@@ @@
             $filename = $this->saveImage($request->input('token'));
             $dataUpdate['image'] = $filename;
         }
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge([]);
         /** @var Employee $employee */
         $employee = $this->orchestratorHandler->handler('update-employee', $request);
         $dataUpdateUser = ['profileId' => $request->input('profile'), 'login' => $request->input('login')];


14) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:61    [M] ArrayItem

@@ @@
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         /** @var Employee $employee */
         $employee = $this->orchestratorHandler->handler('update-employee', $request);
-        $dataUpdateUser = ['profileId' => $request->input('profile'), 'login' => $request->input('login')];
+        $dataUpdateUser = ['profileId' > $request->input('profile'), 'login' => $request->input('login')];
         if (isset($dataUpdate['image'])) {
             $dataUpdateUser['image'] = $dataUpdate['image'];
         }


15) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:62    [M] ArrayItem

@@ @@
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         /** @var Employee $employee */
         $employee = $this->orchestratorHandler->handler('update-employee', $request);
-        $dataUpdateUser = ['profileId' => $request->input('profile'), 'login' => $request->input('login')];
+        $dataUpdateUser = ['profileId' => $request->input('profile'), 'login' > $request->input('login')];
         if (isset($dataUpdate['image'])) {
             $dataUpdateUser['image'] = $dataUpdate['image'];
         }


16) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:73    [M] ArrayItem

@@ @@
         if ($request->filled('password')) {
             $dataUpdateUser['password'] = $this->makeHashPassword($request->input('password'));
         }
-        $request->merge(['dataUpdate' => json_encode($dataUpdateUser)]);
+        $request->merge(['dataUpdate' > json_encode($dataUpdateUser)]);
         $this->orchestratorHandler->handler('update-user', $request);
         return $employee;
     }


17) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/EmployeeActions/UpdateEmployeeActionExecutor.php:73    [M] ArrayItemRemoval

@@ @@
         if ($request->filled('password')) {
             $dataUpdateUser['password'] = $this->makeHashPassword($request->input('password'));
         }
-        $request->merge(['dataUpdate' => json_encode($dataUpdateUser)]);
+        $request->merge([]);
         $this->orchestratorHandler->handler('update-user', $request);
         return $employee;
     }


18) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:34    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' > $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


19) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:35    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' => $request->input('code'), 'name' > $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


20) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:36    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' > $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


21) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:37    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' > $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


22) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:38    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' > $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


23) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:39    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' > $request->input('address'), 'observations' => $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


24) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:40    [M] ArrayItem

@@ @@
      */
     public function invoke(Request $request): Institution
     {
-        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' => $request->input('observations')];
+        $dataUpdate = ['code' => $request->input('code'), 'name' => $request->input('name'), 'shortname' => $request->input('shortname'), 'phone' => $request->input('phone'), 'email' => $request->input('email'), 'address' => $request->input('address'), 'observations' > $request->input('observations')];
         $token = $request->input('token');
         if (isset($token)) {
             $filename = $this->saveImage($token);


25) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:49    [M] ArrayItem

@@ @@
             $filename = $this->saveImage($token);
             $dataUpdate['logo'] = $filename;
         }
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge(['dataUpdate' > json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-institution', $request);
     }
     /**


26) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/InstitutionActions/UpdateInstitutionActionExecutor.php:49    [M] ArrayItemRemoval

@@ @@
             $filename = $this->saveImage($token);
             $dataUpdate['logo'] = $filename;
         }
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge([]);
         return $this->orchestratorHandler->handler('update-institution', $request);
     }
     /**


27) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/UpdateModuleActionExecutor.php:37    [M] ArrayItem

@@ @@
     {
         $route = $request->input('route');
         $this->validateRoute($route);
-        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
+        $dataUpdate = ['name' > $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-module', $request);
     }


28) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/UpdateModuleActionExecutor.php:39    [M] ArrayItem

@@ @@
     {
         $route = $request->input('route');
         $this->validateRoute($route);
-        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
+        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' > $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-module', $request);
     }


29) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/UpdateModuleActionExecutor.php:40    [M] ArrayItem

@@ @@
     {
         $route = $request->input('route');
         $this->validateRoute($route);
-        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
+        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' > $request->input('position'), 'key' => $request->input('key')];
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-module', $request);
     }


30) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/UpdateModuleActionExecutor.php:41    [M] ArrayItem

@@ @@
     {
         $route = $request->input('route');
         $this->validateRoute($route);
-        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
+        $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' > $request->input('key')];
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-module', $request);
     }


31) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/UpdateModuleActionExecutor.php:44    [M] ArrayItem

@@ @@
         $route = $request->input('route');
         $this->validateRoute($route);
         $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge(['dataUpdate' > json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-module', $request);
     }
     /**


32) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/UpdateModuleActionExecutor.php:44    [M] ArrayItemRemoval

@@ @@
         $route = $request->input('route');
         $this->validateRoute($route);
         $dataUpdate = ['name' => $request->input('name'), 'route' => $route, 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'key' => $request->input('key')];
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge([]);
         return $this->orchestratorHandler->handler('update-module', $request);
     }
     /**


33) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/CreateProfileActionExecutor.php:28    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Profile
     {
         $modulesAggregator = $this->getModulesAggregator($request);
-        $request->merge(['modulesAggregator' => json_encode($modulesAggregator)]);
+        $request->merge(['modulesAggregator' > json_encode($modulesAggregator)]);
         return $this->orchestratorHandler->handler('create-profile', $request);
     }
     /**


34) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/CreateProfileActionExecutor.php:28    [M] ArrayItemRemoval

@@ @@
     public function invoke(Request $request): Profile
     {
         $modulesAggregator = $this->getModulesAggregator($request);
-        $request->merge(['modulesAggregator' => json_encode($modulesAggregator)]);
+        $request->merge([]);
         return $this->orchestratorHandler->handler('create-profile', $request);
     }
     /**


35) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/UpdateProfileActionExecutor.php:29    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Profile
     {
         $modulesAggregator = $this->getModulesAggregator($request);
-        $dataUpdate = ['name' => $request->input('name'), 'description' => $request->input('description'), 'modules' => $modulesAggregator];
+        $dataUpdate = ['name' > $request->input('name'), 'description' => $request->input('description'), 'modules' => $modulesAggregator];
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-profile', $request);
     }


36) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/UpdateProfileActionExecutor.php:30    [M] ArrayItem

@@ @@
     public function invoke(Request $request): Profile
     {
         $modulesAggregator = $this->getModulesAggregator($request);
-        $dataUpdate = ['name' => $request->input('name'), 'description' => $request->input('description'), 'modules' => $modulesAggregator];
+        $dataUpdate = ['name' => $request->input('name'), 'description' > $request->input('description'), 'modules' => $modulesAggregator];
         $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-profile', $request);
     }


37) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/UpdateProfileActionExecutor.php:34    [M] ArrayItem

@@ @@
     {
         $modulesAggregator = $this->getModulesAggregator($request);
         $dataUpdate = ['name' => $request->input('name'), 'description' => $request->input('description'), 'modules' => $modulesAggregator];
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge(['dataUpdate' > json_encode($dataUpdate)]);
         return $this->orchestratorHandler->handler('update-profile', $request);
     }
     /**


38) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/UpdateProfileActionExecutor.php:34    [M] ArrayItemRemoval

@@ @@
     {
         $modulesAggregator = $this->getModulesAggregator($request);
         $dataUpdate = ['name' => $request->input('name'), 'description' => $request->input('description'), 'modules' => $modulesAggregator];
-        $request->merge(['dataUpdate' => json_encode($dataUpdate)]);
+        $request->merge([]);
         return $this->orchestratorHandler->handler('update-profile', $request);
     }
     /**


39) /var/www/abacusSystem-new/app/Http/Controllers/EmployeeController.php:80    [M] MethodCallRemoval

@@ @@
         if (isset($userId)) {
             $request->merge(['userId' => $userId, 'state' => $employee->state()->value()]);
             $this->orchestratorHandler->handler('change-state-user', $request);
-            UserUpdateOrDeleteEvent::dispatch($userId);
+            
         }
         return new JsonResponse(status: Response::HTTP_CREATED);
     }


40) /var/www/abacusSystem-new/app/Http/Controllers/EmployeeController.php:127    [M] DecrementInteger

@@ @@
     }
     public function setImageEmployee(Request $request): JsonResponse
     {
-        $random = Str::random(10);
+        $random = Str::random(9);
         $imageUrl = $this->saveImageTmp($request->file('file')->getRealPath(), $random);
         return new JsonResponse(['token' => $random, 'url' => $imageUrl], Response::HTTP_CREATED);
     }


41) /var/www/abacusSystem-new/app/Http/Controllers/EmployeeController.php:127    [M] IncrementInteger

@@ @@
     }
     public function setImageEmployee(Request $request): JsonResponse
     {
-        $random = Str::random(10);
+        $random = Str::random(11);
         $imageUrl = $this->saveImageTmp($request->file('file')->getRealPath(), $random);
         return new JsonResponse(['token' => $random, 'url' => $imageUrl], Response::HTTP_CREATED);
     }


42) /var/www/abacusSystem-new/app/Http/Controllers/EmployeeController.php:152    [M] ArrayItemRemoval

@@ @@
         }
         $userId = $employee->userId()->value();
         if (isset($userId)) {
-            $request->merge(['userId' => $userId]);
+            $request->merge([]);
             $this->orchestratorHandler->handler('delete-user', $request);
         }
         return new JsonResponse(status: Response::HTTP_OK);


43) /var/www/abacusSystem-new/app/Http/Controllers/EmployeeController.php:165    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): Middleware|array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getEmployees', 'setImageEmployee', 'deleteEmployee', 'changeStateEmployee', 'storeEmployee'])];
+        return [new Middleware(['verify-session']), new Middleware('only.ajax-request', only: ['getEmployees', 'setImageEmployee', 'deleteEmployee', 'changeStateEmployee', 'storeEmployee'])];
     }
 }


44) /var/www/abacusSystem-new/app/Http/Controllers/EmployeeController.php:166    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): Middleware|array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getEmployees', 'setImageEmployee', 'deleteEmployee', 'changeStateEmployee', 'storeEmployee'])];
+        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['setImageEmployee', 'deleteEmployee', 'changeStateEmployee', 'storeEmployee'])];
     }
 }


45) /var/www/abacusSystem-new/app/Http/Controllers/InstitutionController.php:84    [M] DecrementInteger

@@ @@
     }
     public function setLogoInstitution(Request $request): JsonResponse
     {
-        $random = Str::random(10);
+        $random = Str::random(9);
         $imageUrl = $this->saveImageTmp($request->file('file')->getRealPath(), $random);
         return new JsonResponse(['token' => $random, 'url' => $imageUrl], Response::HTTP_CREATED);
     }


46) /var/www/abacusSystem-new/app/Http/Controllers/InstitutionController.php:84    [M] IncrementInteger

@@ @@
     }
     public function setLogoInstitution(Request $request): JsonResponse
     {
-        $random = Str::random(10);
+        $random = Str::random(11);
         $imageUrl = $this->saveImageTmp($request->file('file')->getRealPath(), $random);
         return new JsonResponse(['token' => $random, 'url' => $imageUrl], Response::HTTP_CREATED);
     }


47) /var/www/abacusSystem-new/app/Http/Controllers/InstitutionController.php:133    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): array
     {
-        return [new Middleware(['auth', 'verify-session'])];
+        return [new Middleware(['verify-session'])];
     }
 }


48) /var/www/abacusSystem-new/app/Http/Controllers/ModuleController.php:104    [M] MethodCallRemoval

@@ @@
         try {
             $request->merge(['moduleId' => $id]);
             $this->orchestratorHandler->handler('delete-module', $request);
-            ModuleUpdatedOrDeletedEvent::dispatch($id);
+            
         } catch (Exception $exception) {
             $this->logger->error($exception->getMessage(), $exception->getTrace());
             return new JsonResponse(status: Response::HTTP_INTERNAL_SERVER_ERROR);


49) /var/www/abacusSystem-new/app/Http/Controllers/ModuleController.php:120    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getModules', 'changeStateModule', 'deleteModule', 'getModule', 'storeModule'])];
+        return [new Middleware(['verify-session']), new Middleware('only.ajax-request', only: ['getModules', 'changeStateModule', 'deleteModule', 'getModule', 'storeModule'])];
     }
 }


50) /var/www/abacusSystem-new/app/Http/Controllers/ModuleController.php:121    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getModules', 'changeStateModule', 'deleteModule', 'getModule', 'storeModule'])];
+        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['changeStateModule', 'deleteModule', 'getModule', 'storeModule'])];
     }
 }


51) /var/www/abacusSystem-new/app/Http/Controllers/ProfileController.php:75    [M] MethodCallRemoval

@@ @@
         try {
             $request->merge(['profileId' => $id]);
             $this->orchestratorHandler->handler('delete-profile', $request);
-            ProfileUpdatedOrDeletedEvent::dispatch($id);
+            
         } catch (Exception $exception) {
             $this->logger->error($exception->getMessage(), $exception->getTrace());
             return new JsonResponse(status: Response::HTTP_INTERNAL_SERVER_ERROR);


52) /var/www/abacusSystem-new/app/Http/Controllers/ProfileController.php:124    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getProfiles', 'getProfile'])];
+        return [new Middleware(['verify-session']), new Middleware('only.ajax-request', only: ['getProfiles', 'getProfile'])];
     }
 }


53) /var/www/abacusSystem-new/app/Http/Controllers/ProfileController.php:125    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getProfiles', 'getProfile'])];
+        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['getProfile'])];
     }
 }


54) /var/www/abacusSystem-new/app/Http/Controllers/SecurityController.php:110    [M] ArrayItem

@@ @@
     }
     private function getEmployee(Request $request, User $user): Employee
     {
-        $request->merge(['employeeId' => $user->employeeId()->value()]);
+        $request->merge(['employeeId' > $user->employeeId()->value()]);
         return $this->orchestratorHandler->handler('retrieve-employee', $request);
     }
     /**


55) /var/www/abacusSystem-new/app/Http/Controllers/SecurityController.php:119    [M] ArrayItem

@@ @@
      */
     private function getProfile(Request $request, User $user): Profile
     {
-        $request->merge(['profileId' => $user->profileId()->value()]);
+        $request->merge(['profileId' > $user->profileId()->value()]);
         $profile = $this->orchestratorHandler->handler('retrieve-profile', $request);
         if ($profile instanceof Profile && $profile->state()->isInactivated()) {
             $this->logger->warning("User's profile with id: " . $profile->id()->value() . ' is not active');


56) /var/www/abacusSystem-new/app/Http/Controllers/SecurityController.php:123    [M] InstanceOf_

@@ @@
     {
         $request->merge(['profileId' => $user->profileId()->value()]);
         $profile = $this->orchestratorHandler->handler('retrieve-profile', $request);
-        if ($profile instanceof Profile && $profile->state()->isInactivated()) {
+        if (true && $profile->state()->isInactivated()) {
             $this->logger->warning("User's profile with id: " . $profile->id()->value() . ' is not active');
             throw new ProfileNotActiveException('User is not authorized, contact with administrator');
         }


57) /var/www/abacusSystem-new/app/Http/Controllers/SecurityController.php:137    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): array
     {
-        return [new Middleware('auth', only: ['home'])];
+        return [new Middleware('auth', only: [])];
     }
 }


58) /var/www/abacusSystem-new/app/Http/Controllers/UserController.php:81    [M] ArrayItemRemoval

@@ @@
     }
     public function resetPassword(ResetPasswordRequest $request): JsonResponse
     {
-        $dataUpdate = ['state' => ValueObjectStatus::STATE_ACTIVE, 'password' => $this->makeHashPassword($request->input('password'))];
+        $dataUpdate = ['password' => $this->makeHashPassword($request->input('password'))];
         $request->merge(['dataUpdate' => $dataUpdate]);
         $this->orchestratorHandler->handler('update-user', $request);
         return new JsonResponse(status: ResponseFoundation::HTTP_CREATED);


59) /var/www/abacusSystem-new/app/Http/Controllers/UserController.php:83    [M] ArrayItem

@@ @@
     }
     public function resetPassword(ResetPasswordRequest $request): JsonResponse
     {
-        $dataUpdate = ['state' => ValueObjectStatus::STATE_ACTIVE, 'password' => $this->makeHashPassword($request->input('password'))];
+        $dataUpdate = ['state' => ValueObjectStatus::STATE_ACTIVE, 'password' > $this->makeHashPassword($request->input('password'))];
         $request->merge(['dataUpdate' => $dataUpdate]);
         $this->orchestratorHandler->handler('update-user', $request);
         return new JsonResponse(status: ResponseFoundation::HTTP_CREATED);


60) /var/www/abacusSystem-new/app/Http/Controllers/UserController.php:86    [M] ArrayItemRemoval

@@ @@
     public function resetPassword(ResetPasswordRequest $request): JsonResponse
     {
         $dataUpdate = ['state' => ValueObjectStatus::STATE_ACTIVE, 'password' => $this->makeHashPassword($request->input('password'))];
-        $request->merge(['dataUpdate' => $dataUpdate]);
+        $request->merge([]);
         $this->orchestratorHandler->handler('update-user', $request);
         return new JsonResponse(status: ResponseFoundation::HTTP_CREATED);
     }


61) /var/www/abacusSystem-new/app/Http/Controllers/UserController.php:97    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): Middleware|array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['recoveryAccout', 'resetPassword'])];
+        return [new Middleware(['verify-session']), new Middleware('only.ajax-request', only: ['recoveryAccout', 'resetPassword'])];
     }
 }


62) /var/www/abacusSystem-new/app/Http/Controllers/UserController.php:98    [M] ArrayItemRemoval

@@ @@
      */
     public static function middleware(): Middleware|array
     {
-        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['recoveryAccout', 'resetPassword'])];
+        return [new Middleware(['auth', 'verify-session']), new Middleware('only.ajax-request', only: ['resetPassword'])];
     }
 }


63) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:38    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' > $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


64) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:40    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' > $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


65) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:41    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' > $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


66) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:42    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' > $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


67) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:43    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' > $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


68) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:44    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' > $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


69) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:45    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' > $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


70) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:46    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' > $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


71) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:47    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' > $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


72) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:48    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' > $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


73) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:49    [M] ArrayItem

@@ @@
     public function make(Request $request): Employee
     {
         $birthdate = $request->date('birthdate', 'd/m/Y');
-        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
+        $dataEmployee = ['id' => $request->input('employeeId'), 'userId' => null, 'identification' => $request->input('identifier'), 'name' => $request->input('name'), 'lastname' => $request->input('lastname'), 'identification_type' => $request->input('typeDocument'), 'observations' => $request->input('observations'), 'email' => $request->input('email'), 'phone' => $request->input('phone'), 'address' => $request->input('address'), 'birthdate' => $birthdate->format('Y-m-d'), 'createdAt' > $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW, 'image' => null];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;


74) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/CreateEmployeeOrchestrator.php:59    [M] ArrayItemRemoval

@@ @@
             $filename = $this->saveImage($request->input('token'));
             $dataEmployee['image'] = $filename;
         }
-        return $this->employeeManagement->createEmployee([Employee::TYPE => $dataEmployee]);
+        return $this->employeeManagement->createEmployee([]);
     }
     /**
      * @return string


75) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] Concat

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url($employee->image()->value() . self::IMAGE_PATH_FULL) . '?v=' . Str::random(10);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


76) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url(self::IMAGE_PATH_FULL) . '?v=' . Str::random(10);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


77) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] Concat

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = '?v=' . url(self::IMAGE_PATH_FULL . $employee->image()->value()) . Str::random(10);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


78) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = '?v=' . Str::random(10);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


79) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . Str::random(10);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


80) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] DecrementInteger

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(9);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


81) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] IncrementInteger

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(11);
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


82) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] Concat

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . Str::random(10) . '?v=';
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


83) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Employee/DetailEmployeeOrchestrator.php:45    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($employeeId)) {
             $employee = $this->employeeManagement->searchEmployeeById($employeeId);
             $user = $this->userManagement->searchUserById($employee->userId()->value());
-            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=' . Str::random(10);
+            $urlFile = url(self::IMAGE_PATH_FULL . $employee->image()->value()) . '?v=';
         }
         $profiles = $this->profileManagement->searchProfiles();
         $userId = (!is_null($employee)) ? $employee->userId()->value() : null;


84) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:37    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Institution
     {
-        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
+        $dataInstitution = ['id' > $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;


85) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:38    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Institution
     {
-        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
+        $dataInstitution = ['id' => $request->input('institutionId'), 'name' > $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;


86) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:39    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Institution
     {
-        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
+        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' > $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;


87) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:40    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Institution
     {
-        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
+        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' > $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;


88) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:41    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Institution
     {
-        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
+        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' > $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;


89) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:42    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Institution
     {
-        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' => $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
+        $dataInstitution = ['id' => $request->input('institutionId'), 'name' => $request->input('name'), 'code' => $request->input('code'), 'shortname' => $request->input('shortname'), 'observations' => $request->input('observations'), 'createdAt' > $this->getCurrentTime(), 'state' => ValueObjectStatus::STATE_NEW];
         if ($request->filled('token')) {
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;


90) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/CreateInstitutionOrchestrator.php:51    [M] ArrayItemRemoval

@@ @@
             $filename = $this->saveImage($request->input('token'));
             $dataInstitution['logo'] = $filename;
         }
-        return $this->institutionManagement->createInstitution([Institution::TYPE => $dataInstitution]);
+        return $this->institutionManagement->createInstitution([]);
     }
     /**
      * @return string


91) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] Concat

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url($institution->logo()->value() . self::IMAGE_PATH_FULL . '?v=' . Str::random(10));
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


92) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url($institution->logo()->value() . '?v=' . Str::random(10));
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


93) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] Concat

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url(self::IMAGE_PATH_FULL . '?v=' . $institution->logo()->value() . Str::random(10));
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


94) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . Str::random(10));
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


95) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] DecrementInteger

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(9));
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


96) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] IncrementInteger

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(11));
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


97) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] Concat

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . Str::random(10) . '?v=');
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


98) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Institution/DetailInstitutionOrchestrator.php:36    [M] ConcatOperandRemoval

@@ @@
         if (!is_null($institutionId)) {
             /** @var Institution $institution */
             $institution = $this->institutionManagement->searchInstitutionById($institutionId);
-            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=' . Str::random(10));
+            $urlFile = url(self::IMAGE_PATH_FULL . $institution->logo()->value() . '?v=');
         }
         return ['institutionId' => $institutionId, 'institution' => $institution ?? null, 'image' => $urlFile ?? null];
     }


99) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:30    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(ImageManagerInterface::class, function (Application $app) {
-            return new ImageManager($app->make(Driver::class));
-        });
+        
         $this->app->singletonIf(StatefulGuard::class, function (Application $app) {
             $authManager = $app->make(AuthManager::class);
             return $authManager->guard();


100) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:34    [M] MethodCallRemoval

@@ @@
         $this->app->singletonIf(ImageManagerInterface::class, function (Application $app) {
             return new ImageManager($app->make(Driver::class));
         });
-        $this->app->singletonIf(StatefulGuard::class, function (Application $app) {
-            $authManager = $app->make(AuthManager::class);
-            return $authManager->guard();
-        });
+        
     }
     /**
      * Bootstrap any application services.


101) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:46    [M] MethodCallRemoval

@@ @@
      */
     public function boot(): void
     {
-        Event::listen(ModuleUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
+        
         Event::listen(ProfileUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
         Event::listen(RefreshModulesSessionEvent::class, UserRefreshSession::class);
         Event::listen(EmployeeUpdateOrDeletedEvent::class, EmployeeWarmup::class);


102) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:51    [M] MethodCallRemoval

@@ @@
     public function boot(): void
     {
         Event::listen(ModuleUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
-        Event::listen(ProfileUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
+        
         Event::listen(RefreshModulesSessionEvent::class, UserRefreshSession::class);
         Event::listen(EmployeeUpdateOrDeletedEvent::class, EmployeeWarmup::class);
         Event::listen(UserUpdateOrDeleteEvent::class, UserWarmup::class);
     }
 }


103) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:56    [M] MethodCallRemoval

@@ @@
     {
         Event::listen(ModuleUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
         Event::listen(ProfileUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
-        Event::listen(RefreshModulesSessionEvent::class, UserRefreshSession::class);
+        
         Event::listen(EmployeeUpdateOrDeletedEvent::class, EmployeeWarmup::class);
         Event::listen(UserUpdateOrDeleteEvent::class, UserWarmup::class);
     }
 }


104) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:61    [M] MethodCallRemoval

@@ @@
         Event::listen(ModuleUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
         Event::listen(ProfileUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
         Event::listen(RefreshModulesSessionEvent::class, UserRefreshSession::class);
-        Event::listen(EmployeeUpdateOrDeletedEvent::class, EmployeeWarmup::class);
+        
         Event::listen(UserUpdateOrDeleteEvent::class, UserWarmup::class);
     }
 }


105) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:66    [M] MethodCallRemoval

@@ @@
         Event::listen(ProfileUpdatedOrDeletedEvent::class, ProfilesWarmup::class);
         Event::listen(RefreshModulesSessionEvent::class, UserRefreshSession::class);
         Event::listen(EmployeeUpdateOrDeletedEvent::class, EmployeeWarmup::class);
-        Event::listen(UserUpdateOrDeleteEvent::class, UserWarmup::class);
+        
     }
 }


106) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:24    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(ActionExecutorHandler::class, function (Application $app) {
-            $actionExecutorHandler = new ActionExecutorHandler();
-            $actionExecutorHandler->addActionExecutor($app->make(CreateProfileActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateProfileActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(CreateEmployeeActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateEmployeeActionExecutor::class));
-            return $actionExecutorHandler;
-        });
+        
     }
     /**
      * Bootstrap services.


107) /var/www/abacusSystem-new/app/Providers/Service/EmployeeServiceProvider.php:37    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(EmployeeRepositoryContract::class, function (Application $app) {
-            $chainRepository = new ChainEmployeeRepository();
-            $chainRepository->addRepository($app->make(RedisEmployeeRepository::class))->addRepository($app->make(EloquentEmployeeRepository::class));
-            return $chainRepository;
-        });
+        
         //Commands
         $this->app->singletonIf(EmployeeWarmup::class, function (Application $app) {
             return new EmployeeWarmup($app->make(LoggerInterface::class), $app->make(EmployeeFactoryContract::class), $app->make(EloquentEmployeeRepository::class), $app->make(RedisEmployeeRepository::class));


108) /var/www/abacusSystem-new/app/Providers/Service/EmployeeServiceProvider.php:51    [M] MethodCallRemoval

@@ @@
             $chainRepository->addRepository($app->make(RedisEmployeeRepository::class))->addRepository($app->make(EloquentEmployeeRepository::class));
             return $chainRepository;
         });
-        //Commands
-        $this->app->singletonIf(EmployeeWarmup::class, function (Application $app) {
-            return new EmployeeWarmup($app->make(LoggerInterface::class), $app->make(EmployeeFactoryContract::class), $app->make(EloquentEmployeeRepository::class), $app->make(RedisEmployeeRepository::class));
-        });
+        
     }
     /**
      * Get the services provided by the provider.


109) /var/www/abacusSystem-new/app/Providers/Service/InstitutionServiceProvider.php:36    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(InstitutionRepositoryContract::class, function (Application $app) {
-            $chainRepository = new ChainInstitutionRepository();
-            $chainRepository->addRepository($app->make(RedisInstitutionRepository::class));
-            $chainRepository->addRepository($app->make(EloquentInstitutionRepository::class));
-            return $chainRepository;
-        });
+        
         //Commands
         $this->app->singletonIf(InstitutionWarmup::class, function (Application $app) {
             return new InstitutionWarmup($app->make(LoggerInterface::class), $app->make(InstitutionFactoryContract::class), $app->make(EloquentInstitutionRepository::class), $app->make(RedisInstitutionRepository::class));


110) /var/www/abacusSystem-new/app/Providers/Service/InstitutionServiceProvider.php:51    [M] MethodCallRemoval

@@ @@
             $chainRepository->addRepository($app->make(EloquentInstitutionRepository::class));
             return $chainRepository;
         });
-        //Commands
-        $this->app->singletonIf(InstitutionWarmup::class, function (Application $app) {
-            return new InstitutionWarmup($app->make(LoggerInterface::class), $app->make(InstitutionFactoryContract::class), $app->make(EloquentInstitutionRepository::class), $app->make(RedisInstitutionRepository::class));
-        });
+        
     }
     /**
      * Bootstrap services.


111) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:48    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(OrchestratorHandlerContract::class, function (Application $app) {
-            $orchestratorHandler = new OrchestratorHandler();
-            //Employee Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(CreateEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));
-            //User Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));
-            //Profile Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));
-            //Institution Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));
-            //Module Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetModulesOrchestrator::class));
-            return $orchestratorHandler;
-        });
+        
     }
     /**
      * Bootstrap services.


112) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:53    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(ProfileRepositoryContract::class, function (Application $app) {
-            $chainRepository = new ChainProfileRepository();
-            $chainRepository->addRepository($app->make(RedisProfileRepository::class))->addRepository($app->make(EloquentProfileRepository::class));
-            return $chainRepository;
-        });
+        
         $this->app->singletonIf(ModuleRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainModuleRepository();
             $chainRepository->addRepository($app->make(RedisModuleRepository::class))->addRepository($app->make(EloquentModuleRepository::class));


113) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:66    [M] MethodCallRemoval

@@ @@
             $chainRepository->addRepository($app->make(RedisProfileRepository::class))->addRepository($app->make(EloquentProfileRepository::class));
             return $chainRepository;
         });
-        $this->app->singletonIf(ModuleRepositoryContract::class, function (Application $app) {
-            $chainRepository = new ChainModuleRepository();
-            $chainRepository->addRepository($app->make(RedisModuleRepository::class))->addRepository($app->make(EloquentModuleRepository::class));
-            return $chainRepository;
-        });
+        
         //Commands
         $this->app->singletonIf(ProfileWarmup::class, function (Application $app) {
             return new ProfileWarmup($app->make(LoggerInterface::class), $app->make(ProfileFactoryContract::class), $app->make(EloquentProfileRepository::class), $app->make(RedisProfileRepository::class));


114) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:80    [M] MethodCallRemoval

@@ @@
             $chainRepository->addRepository($app->make(RedisModuleRepository::class))->addRepository($app->make(EloquentModuleRepository::class));
             return $chainRepository;
         });
-        //Commands
-        $this->app->singletonIf(ProfileWarmup::class, function (Application $app) {
-            return new ProfileWarmup($app->make(LoggerInterface::class), $app->make(ProfileFactoryContract::class), $app->make(EloquentProfileRepository::class), $app->make(RedisProfileRepository::class));
-        });
+        
         $this->app->singletonIf(ModuleWarmup::class, function (Application $app) {
             return new ModuleWarmup($app->make(LoggerInterface::class), $app->make(ModuleFactoryContract::class), $app->make(EloquentModuleRepository::class), $app->make(RedisModuleRepository::class));
         });


115) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:89    [M] MethodCallRemoval

@@ @@
         $this->app->singletonIf(ProfileWarmup::class, function (Application $app) {
             return new ProfileWarmup($app->make(LoggerInterface::class), $app->make(ProfileFactoryContract::class), $app->make(EloquentProfileRepository::class), $app->make(RedisProfileRepository::class));
         });
-        $this->app->singletonIf(ModuleWarmup::class, function (Application $app) {
-            return new ModuleWarmup($app->make(LoggerInterface::class), $app->make(ModuleFactoryContract::class), $app->make(EloquentModuleRepository::class), $app->make(RedisModuleRepository::class));
-        });
+        
     }
     /**
      * Get the services provided by the provider.


116) /var/www/abacusSystem-new/app/Providers/Service/UserServiceProvider.php:37    [M] MethodCallRemoval

@@ @@
      */
     public function register(): void
     {
-        $this->app->singletonIf(UserRepositoryContract::class, function (Application $app) {
-            $chainRepository = new ChainUserRepository();
-            $chainRepository->addRepository($app->make(RedisUserRepository::class))->addRepository($app->make(EloquentUserRepository::class));
-            return $chainRepository;
-        });
+        
         //Commands
         $this->app->singletonIf(UserWarmup::class, function (Application $app) {
             return new UserWarmup($app->make(LoggerInterface::class), $app->make(UserFactoryContract::class), $app->make(EloquentUserRepository::class), $app->make(RedisUserRepository::class));


117) /var/www/abacusSystem-new/app/Providers/Service/UserServiceProvider.php:51    [M] MethodCallRemoval

@@ @@
             $chainRepository->addRepository($app->make(RedisUserRepository::class))->addRepository($app->make(EloquentUserRepository::class));
             return $chainRepository;
         });
-        //Commands
-        $this->app->singletonIf(UserWarmup::class, function (Application $app) {
-            return new UserWarmup($app->make(LoggerInterface::class), $app->make(UserFactoryContract::class), $app->make(EloquentUserRepository::class), $app->make(RedisUserRepository::class));
-        });
+        
     }
     /**
      * Get the services provided by the provider.


118) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:38    [M] MethodCallRemoval

@@ @@
     public function boot(): void
     {
         $this->session = $this->app->make(Session::class);
-        View::composer('layouts.home', HomeComposer::class);
+        
         View::composer('*', function ($view) {
             /** @var Request $requestService */
             $requestService = $this->app->make(Request::class);


119) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:39    [M] MethodCallRemoval

@@ @@
     {
         $this->session = $this->app->make(Session::class);
         View::composer('layouts.home', HomeComposer::class);
-        View::composer('*', function ($view) {
-            /** @var Request $requestService */
-            $requestService = $this->app->make(Request::class);
-            $isAjax = $requestService->ajax();
-            if ($this->session->get('user') !== null && !$isAjax) {
-                View::composer('layouts.menu', MenuComposer::class);
-            }
-            $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';
-            $view->with('layout', $baseHome);
-        });
+        
     }
 }


120) /var/www/abacusSystem-new/app/Traits/DataTablesTrait.php:15    [M] PublicVisibility

@@ @@
 trait DataTablesTrait
 {
     private ViewFactory $viewFactory;
-    public function setViewFactory(ViewFactory $viewFactory): void
+    protected function setViewFactory(ViewFactory $viewFactory): void
     {
         $this->viewFactory = $viewFactory;
     }


121) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:19    [M] PublicVisibility

@@ @@
     private const IMAGE_PATH_FULL = '/images/full/';
     private const IMAGE_PATH_SMALL = '/images/small/';
     private ImageManagerInterface $imageManager;
-    public function setImageManager(ImageManagerInterface $imageManager): void
+    protected function setImageManager(ImageManagerInterface $imageManager): void
     {
         $this->imageManager = $imageManager;
     }


122) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:27    [M] Concat

@@ @@
     private function saveImage(string $token): string
     {
         $imageTmp = public_path(self::IMAGE_PATH_TMP . $token . '.jpg');
-        $filename = Str::uuid()->toString() . '.jpg';
+        $filename = '.jpg' . Str::uuid()->toString();
         $image = $this->imageManager->read($imageTmp);
         $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
         $image->resize(150, 150);


123) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:27    [M] ConcatOperandRemoval

@@ @@
     private function saveImage(string $token): string
     {
         $imageTmp = public_path(self::IMAGE_PATH_TMP . $token . '.jpg');
-        $filename = Str::uuid()->toString() . '.jpg';
+        $filename = '.jpg';
         $image = $this->imageManager->read($imageTmp);
         $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
         $image->resize(150, 150);


124) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:27    [M] ConcatOperandRemoval

@@ @@
     private function saveImage(string $token): string
     {
         $imageTmp = public_path(self::IMAGE_PATH_TMP . $token . '.jpg');
-        $filename = Str::uuid()->toString() . '.jpg';
+        $filename = Str::uuid()->toString();
         $image = $this->imageManager->read($imageTmp);
         $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
         $image->resize(150, 150);


125) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:30    [M] Concat

@@ @@
         $imageTmp = public_path(self::IMAGE_PATH_TMP . $token . '.jpg');
         $filename = Str::uuid()->toString() . '.jpg';
         $image = $this->imageManager->read($imageTmp);
-        $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
+        $image->save(public_path($filename . self::IMAGE_PATH_FULL));
         $image->resize(150, 150);
         $image->save(public_path(self::IMAGE_PATH_SMALL . $filename));
         @unlink($imageTmp);


126) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:30    [M] ConcatOperandRemoval

@@ @@
         $imageTmp = public_path(self::IMAGE_PATH_TMP . $token . '.jpg');
         $filename = Str::uuid()->toString() . '.jpg';
         $image = $this->imageManager->read($imageTmp);
-        $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
+        $image->save(public_path($filename));
         $image->resize(150, 150);
         $image->save(public_path(self::IMAGE_PATH_SMALL . $filename));
         @unlink($imageTmp);


127) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:30    [M] ConcatOperandRemoval

@@ @@
         $imageTmp = public_path(self::IMAGE_PATH_TMP . $token . '.jpg');
         $filename = Str::uuid()->toString() . '.jpg';
         $image = $this->imageManager->read($imageTmp);
-        $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
+        $image->save(public_path(self::IMAGE_PATH_FULL));
         $image->resize(150, 150);
         $image->save(public_path(self::IMAGE_PATH_SMALL . $filename));
         @unlink($imageTmp);


128) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:32    [M] Concat

@@ @@
         $image = $this->imageManager->read($imageTmp);
         $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
         $image->resize(150, 150);
-        $image->save(public_path(self::IMAGE_PATH_SMALL . $filename));
+        $image->save(public_path($filename . self::IMAGE_PATH_SMALL));
         @unlink($imageTmp);
         return $filename;
     }


129) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:32    [M] ConcatOperandRemoval

@@ @@
         $image = $this->imageManager->read($imageTmp);
         $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
         $image->resize(150, 150);
-        $image->save(public_path(self::IMAGE_PATH_SMALL . $filename));
+        $image->save(public_path($filename));
         @unlink($imageTmp);
         return $filename;
     }


130) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:32    [M] ConcatOperandRemoval

@@ @@
         $image = $this->imageManager->read($imageTmp);
         $image->save(public_path(self::IMAGE_PATH_FULL . $filename));
         $image->resize(150, 150);
-        $image->save(public_path(self::IMAGE_PATH_SMALL . $filename));
+        $image->save(public_path(self::IMAGE_PATH_SMALL));
         @unlink($imageTmp);
         return $filename;
     }


131) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:40    [M] Concat

@@ @@
     }
     private function saveImageTmp(string $path, string $random): string
     {
-        $filename = $random . '.jpg';
+        $filename = '.jpg' . $random;
         $image = $this->imageManager->read($path);
         $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
         return url(self::IMAGE_PATH_TMP . $filename);


132) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:40    [M] ConcatOperandRemoval

@@ @@
     }
     private function saveImageTmp(string $path, string $random): string
     {
-        $filename = $random . '.jpg';
+        $filename = '.jpg';
         $image = $this->imageManager->read($path);
         $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
         return url(self::IMAGE_PATH_TMP . $filename);


133) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:40    [M] ConcatOperandRemoval

@@ @@
     }
     private function saveImageTmp(string $path, string $random): string
     {
-        $filename = $random . '.jpg';
+        $filename = $random;
         $image = $this->imageManager->read($path);
         $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
         return url(self::IMAGE_PATH_TMP . $filename);


134) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:43    [M] Concat

@@ @@
     {
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
-        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
+        $image->save($filename . public_path(self::IMAGE_PATH_TMP), quality: 70);
         return url(self::IMAGE_PATH_TMP . $filename);
     }
     private function deleteImage(string $photo): void


135) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:43    [M] ConcatOperandRemoval

@@ @@
     {
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
-        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
+        $image->save($filename, quality: 70);
         return url(self::IMAGE_PATH_TMP . $filename);
     }
     private function deleteImage(string $photo): void


136) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:43    [M] ConcatOperandRemoval

@@ @@
     {
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
-        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
+        $image->save(public_path(self::IMAGE_PATH_TMP), quality: 70);
         return url(self::IMAGE_PATH_TMP . $filename);
     }
     private function deleteImage(string $photo): void


137) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:43    [M] DecrementInteger

@@ @@
     {
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
-        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
+        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 69);
         return url(self::IMAGE_PATH_TMP . $filename);
     }
     private function deleteImage(string $photo): void


138) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:43    [M] IncrementInteger

@@ @@
     {
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
-        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
+        $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 71);
         return url(self::IMAGE_PATH_TMP . $filename);
     }
     private function deleteImage(string $photo): void


139) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:45    [M] Concat

@@ @@
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
         $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
-        return url(self::IMAGE_PATH_TMP . $filename);
+        return url($filename . self::IMAGE_PATH_TMP);
     }
     private function deleteImage(string $photo): void
     {


140) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:45    [M] ConcatOperandRemoval

@@ @@
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
         $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
-        return url(self::IMAGE_PATH_TMP . $filename);
+        return url($filename);
     }
     private function deleteImage(string $photo): void
     {


141) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:45    [M] ConcatOperandRemoval

@@ @@
         $filename = $random . '.jpg';
         $image = $this->imageManager->read($path);
         $image->save(public_path(self::IMAGE_PATH_TMP) . $filename, quality: 70);
-        return url(self::IMAGE_PATH_TMP . $filename);
+        return url(self::IMAGE_PATH_TMP);
     }
     private function deleteImage(string $photo): void
     {


142) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:50    [M] Concat

@@ @@
     }
     private function deleteImage(string $photo): void
     {
-        @unlink(public_path(self::IMAGE_PATH_FULL . $photo));
+        @unlink(public_path($photo . self::IMAGE_PATH_FULL));
         @unlink(public_path(self::IMAGE_PATH_SMALL . $photo));
     }
 }


143) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:50    [M] ConcatOperandRemoval

@@ @@
     }
     private function deleteImage(string $photo): void
     {
-        @unlink(public_path(self::IMAGE_PATH_FULL . $photo));
+        @unlink(public_path($photo));
         @unlink(public_path(self::IMAGE_PATH_SMALL . $photo));
     }
 }


144) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:50    [M] ConcatOperandRemoval

@@ @@
     }
     private function deleteImage(string $photo): void
     {
-        @unlink(public_path(self::IMAGE_PATH_FULL . $photo));
+        @unlink(public_path(self::IMAGE_PATH_FULL));
         @unlink(public_path(self::IMAGE_PATH_SMALL . $photo));
     }
 }


145) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:51    [M] Concat

@@ @@
     private function deleteImage(string $photo): void
     {
         @unlink(public_path(self::IMAGE_PATH_FULL . $photo));
-        @unlink(public_path(self::IMAGE_PATH_SMALL . $photo));
+        @unlink(public_path($photo . self::IMAGE_PATH_SMALL));
     }
 }


146) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:51    [M] ConcatOperandRemoval

@@ @@
     private function deleteImage(string $photo): void
     {
         @unlink(public_path(self::IMAGE_PATH_FULL . $photo));
-        @unlink(public_path(self::IMAGE_PATH_SMALL . $photo));
+        @unlink(public_path($photo));
     }
 }


147) /var/www/abacusSystem-new/app/Traits/MultimediaTrait.php:51    [M] ConcatOperandRemoval

@@ @@
     private function deleteImage(string $photo): void
     {
         @unlink(public_path(self::IMAGE_PATH_FULL . $photo));
-        @unlink(public_path(self::IMAGE_PATH_SMALL . $photo));
+        @unlink(public_path(self::IMAGE_PATH_SMALL));
     }
 }


148) /var/www/abacusSystem-new/app/Traits/UserTrait.php:11    [M] PublicVisibility

@@ @@
 trait UserTrait
 {
     private Hasher $hasher;
-    public function setHasher(Hasher $hasher): void
+    protected function setHasher(Hasher $hasher): void
     {
         $this->hasher = $hasher;
     }


149) /var/www/abacusSystem-new/app/Traits/UserTrait.php:16    [M] PublicVisibility

@@ @@
     {
         $this->hasher = $hasher;
     }
-    public function makeHashPassword(string $password): string
+    protected function makeHashPassword(string $password): string
     {
         return $this->hasher->make($password);
     }
 }


150) /var/www/abacusSystem-new/app/Traits/UtilsDateTimeTrait.php:17    [M] PublicVisibility

@@ @@
     /**
      * @return DateTime
      */
-    public function getCurrentTime(): DateTime
+    protected function getCurrentTime(): DateTime
     {
         return new DateTime();
     }


151) /var/www/abacusSystem-new/app/Traits/UtilsDateTimeTrait.php:25    [M] PublicVisibility

@@ @@
     /**
      * @throws Exception
      */
-    public function getDateTime(string $datetime): DateTime
+    protected function getDateTime(string $datetime): DateTime
     {
         return new DateTime($datetime);
     }
 }


152) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:42    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' > $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


153) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:43    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' > $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


154) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:44    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' > $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


155) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:45    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' > $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


156) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:46    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' > $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


157) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:47    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' > $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


158) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:48    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' > $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


159) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:49    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' > $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


160) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:50    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' > $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


161) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:51    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' > $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


162) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:52    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' > $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


163) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:53    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' > $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


164) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:54    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' > $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


165) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:55    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' > $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
     }
 }


166) /var/www/abacusSystem-new/src/core/Employee/Application/DataTransformer/EmployeeDataTransformer.php:56    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' => $this->employee->updatedAt()->value()];
+        return ['id' => $this->employee->id()->value(), 'userId' => $this->employee->userId()->value(), 'identification' => $this->employee->identification()->value(), 'identification_type' => $this->employee->identificationType()->value(), 'name' => $this->employee->name()->value(), 'lastname' => $this->employee->lastname()->value(), 'phone' => $this->employee->phone()->value(), 'email' => $this->employee->email()->value(), 'address' => $this->employee->address()->value(), 'birthdate' => $this->employee->birthdate()->value(), 'observations' => $this->employee->observations()->value(), 'image' => $this->employee->image()->value(), 'search' => $this->employee->search()->value(), 'state' => $this->employee->state()->value(), 'createdAt' => $this->employee->createdAt()->value(), 'updatedAt' > $this->employee->updatedAt()->value()];
     }
 }


167) /var/www/abacusSystem-new/src/core/Employee/Application/Factory/EmployeeFactory.php:91    [M] LogicalNot

@@ @@
         if (!is_null($createdAt)) {
             $employee->setCreatedAt($createdAt);
         }
-        if (!is_null($state)) {
+        if (is_null($state)) {
             $employee->setState($state);
         }
         return $employee;


168) /var/www/abacusSystem-new/src/core/Employee/Application/Factory/EmployeeFactory.php:92    [M] MethodCallRemoval

@@ @@
             $employee->setCreatedAt($createdAt);
         }
         if (!is_null($state)) {
-            $employee->setState($state);
+            
         }
         return $employee;
     }


169) /var/www/abacusSystem-new/src/core/Employee/Application/UseCases/UpdateEmployee/UpdateEmployee.php:29    [M] UnwrapUcFirst

@@ @@
         /** @var UpdateEmployeeRequest $request */
         $employee = $this->employeeRepository->find($request->employeeId());
         foreach ($request->data() as $field => $value) {
-            $methodName = 'change' . ucfirst($field);
+            $methodName = 'change' . $field;
             if (is_callable([$this, $methodName])) {
                 $employee = $this->{$methodName}($employee, $value);
             }


170) /var/www/abacusSystem-new/src/core/Employee/Domain/Employees.php:13    [M] Foreach_

@@ @@
     public const TYPE = 'employees';
     public function __construct(Employee ...$employees)
     {
-        foreach ($employees as $employee) {
+        foreach ([] as $employee) {
             $this->addItem($employee);
         }
     }


171) /var/www/abacusSystem-new/src/core/Employee/Domain/Employees.php:14    [M] MethodCallRemoval

@@ @@
     public function __construct(Employee ...$employees)
     {
         foreach ($employees as $employee) {
-            $this->addItem($employee);
+            
         }
     }
     /**


172) /var/www/abacusSystem-new/src/core/Employee/Domain/ValueObjects/EmployeeEmail.php:15    [M] MethodCallRemoval

@@ @@
     public function __construct(?string $value = null)
     {
         if (!is_null($value)) {
-            $this->validate($value);
+            
         }
         $this->value = $value;
     }


173) /var/www/abacusSystem-new/src/core/Employee/Domain/ValueObjects/EmployeeId.php:15    [M] MethodCallRemoval

@@ @@
     public function __construct(?int $value = null)
     {
         if (!is_null($value)) {
-            $this->validate($value);
+            
         }
         $this->value = $value;
     }


174) /var/www/abacusSystem-new/src/core/Employee/Domain/ValueObjects/EmployeeId.php:39    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = [];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


175) /var/www/abacusSystem-new/src/core/Employee/Domain/ValueObjects/EmployeeId.php:40    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => []];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


176) /var/www/abacusSystem-new/src/core/Employee/Domain/ValueObjects/EmployeeId.php:41    [M] DecrementInteger

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => ['min_range' => 0]];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


177) /var/www/abacusSystem-new/src/core/Employee/Domain/ValueObjects/EmployeeId.php:41    [M] IncrementInteger

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => ['min_range' => 2]];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


178) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Eloquent/Model/Employee.php:88    [M] ArrayItemRemoval

@@ @@
     protected $casts = ['created_at' => 'datetime', 'updated_at' => 'datetime', 'deleted_at' => 'datetime'];
     protected function casts(): array
     {
-        return ['created_at' => 'datetime:Y-m-d H:i:s', 'updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
+        return ['updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
     }
     public function getSearchField(): string
     {


179) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/EloquentEmployeeRepository.php:111    [M] CastArray

@@ @@
         if (is_null($data)) {
             throw new EmployeeNotFoundException('Employee not found with id: ' . $id->value());
         }
-        $employeeModel = $this->updateAttributesModelEmployee((array) $data);
+        $employeeModel = $this->updateAttributesModelEmployee($data);
         $employeeModel->changeState(ValueObjectStatus::STATE_DELETE);
         $employeeModel->changeDeletedAt($this->getDateTime());
         $builder->update($employeeModel->toArray());


180) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/EloquentEmployeeRepository.php:112    [M] MethodCallRemoval

@@ @@
             throw new EmployeeNotFoundException('Employee not found with id: ' . $id->value());
         }
         $employeeModel = $this->updateAttributesModelEmployee((array) $data);
-        $employeeModel->changeState(ValueObjectStatus::STATE_DELETE);
+        
         $employeeModel->changeDeletedAt($this->getDateTime());
         $builder->update($employeeModel->toArray());
     }


181) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/EloquentEmployeeRepository.php:113    [M] MethodCallRemoval

@@ @@
         }
         $employeeModel = $this->updateAttributesModelEmployee((array) $data);
         $employeeModel->changeState(ValueObjectStatus::STATE_DELETE);
-        $employeeModel->changeDeletedAt($this->getDateTime());
+        
         $builder->update($employeeModel->toArray());
     }
     /**


182) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/EloquentEmployeeRepository.php:151    [M] LogicalAnd

@@ @@
     {
         /** @var Builder $builder */
         $builder = $this->database->table($this->getTable())->where('emp_state', '>', ValueObjectStatus::STATE_DELETE);
-        if (array_key_exists('q', $filters) && isset($filters['q'])) {
+        if (array_key_exists('q', $filters) || isset($filters['q'])) {
             $builder->whereFullText($this->model->getSearchField(), $filters['q']);
         }
         $employeeCollection = $builder->get(['emp_id']);


183) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/EloquentEmployeeRepository.php:178    [M] CastArray

@@ @@
         $builder = $this->database->table($this->getTable());
         $builder->where('emp_id', $domain->id()->value());
         $data = $builder->first();
-        $model = $this->updateAttributesModelEmployee((array) $data);
+        $model = $this->updateAttributesModelEmployee($data);
         $model->changeId($domain->id()->value());
         $model->changeIdentification($domain->identification()->value());
         $model->changeIdentificationType($domain->identificationType()->value());


184) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/EloquentEmployeeRepository.php:183    [M] MethodCallRemoval

@@ @@
         $model->changeId($domain->id()->value());
         $model->changeIdentification($domain->identification()->value());
         $model->changeIdentificationType($domain->identificationType()->value());
-        $model->changeName($domain->name()->value());
+        
         $model->changeLastname($domain->lastname()->value());
         $model->changePhone($domain->phone()->value());
         $model->changeBirthdate($domain->birthdate()->value());


185) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:34    [M] ArrayOneItem

@@ @@
     {
         $data = $this->retrieveData();
         $data['state_literal'] = $this->institution->state()->formatHtmlToState();
-        return $data;
+        return (count($data) > 1) ? array_slice($data, 0, 1, true) : $data;
     }
     private function retrieveData(): array
     {


186) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:40    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' > $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


187) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:41    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' > $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


188) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:42    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' > $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


189) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:43    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' > $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


190) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:44    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' > $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


191) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:45    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' > $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


192) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:46    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' > $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


193) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:47    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' > $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


194) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:48    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' > $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
     }
 }


195) /var/www/abacusSystem-new/src/core/Institution/Application/DataTransformer/InstitutionDataTransformer.php:49    [M] ArrayItem

@@ @@
     }
     private function retrieveData(): array
     {
-        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' => $this->institution->updatedAt()->value()];
+        return ['id' => $this->institution->id()->value(), 'code' => $this->institution->code()->value(), 'name' => $this->institution->name()->value(), 'shortname' => $this->institution->shortname()->value(), 'logo' => $this->institution->logo()->value(), 'observations' => $this->institution->observations()->value(), 'state' => $this->institution->state()->value(), 'search' => $this->institution->search()->value(), 'createdAt' => $this->institution->createdAt()->value(), 'updatedAt' > $this->institution->updatedAt()->value()];
     }
 }


196) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:38    [M] MethodCallRemoval

@@ @@
     {
         $data = $data[Institution::TYPE];
         $institution = $this->buildInstitution($this->buildInstitutionId($data['id']), $this->buildInstitutionName($data['name']));
-        $institution->setShortname($this->buildInstitutionShortname($data['shortname']));
+        
         $institution->setCode($this->buildInstitutionCode($data['code']));
         $institution->setObservations($this->buildInstitutionObservations($data['observations']));
         $institution->setState($this->buildInstitutionState($data['state']));


197) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:42    [M] MethodCallRemoval

@@ @@
         $data = $data[Institution::TYPE];
         $institution = $this->buildInstitution($this->buildInstitutionId($data['id']), $this->buildInstitutionName($data['name']));
         $institution->setShortname($this->buildInstitutionShortname($data['shortname']));
-        $institution->setCode($this->buildInstitutionCode($data['code']));
+        
         $institution->setObservations($this->buildInstitutionObservations($data['observations']));
         $institution->setState($this->buildInstitutionState($data['state']));
         $institution->setCreatedAt($this->buildInstitutionCreatedAt($data['createdAt']));


198) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:46    [M] MethodCallRemoval

@@ @@
         $institution = $this->buildInstitution($this->buildInstitutionId($data['id']), $this->buildInstitutionName($data['name']));
         $institution->setShortname($this->buildInstitutionShortname($data['shortname']));
         $institution->setCode($this->buildInstitutionCode($data['code']));
-        $institution->setObservations($this->buildInstitutionObservations($data['observations']));
+        
         $institution->setState($this->buildInstitutionState($data['state']));
         $institution->setCreatedAt($this->buildInstitutionCreatedAt($data['createdAt']));
         if (isset($data['logo'])) {


199) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:50    [M] MethodCallRemoval

@@ @@
         $institution->setShortname($this->buildInstitutionShortname($data['shortname']));
         $institution->setCode($this->buildInstitutionCode($data['code']));
         $institution->setObservations($this->buildInstitutionObservations($data['observations']));
-        $institution->setState($this->buildInstitutionState($data['state']));
+        
         $institution->setCreatedAt($this->buildInstitutionCreatedAt($data['createdAt']));
         if (isset($data['logo'])) {
             $institution->setLogo($this->buildInstitutionLogo($data['logo']));


200) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:54    [M] MethodCallRemoval

@@ @@
         $institution->setCode($this->buildInstitutionCode($data['code']));
         $institution->setObservations($this->buildInstitutionObservations($data['observations']));
         $institution->setState($this->buildInstitutionState($data['state']));
-        $institution->setCreatedAt($this->buildInstitutionCreatedAt($data['createdAt']));
+        
         if (isset($data['logo'])) {
             $institution->setLogo($this->buildInstitutionLogo($data['logo']));
         }


201) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:59    [M] MethodCallRemoval

@@ @@
         $institution->setState($this->buildInstitutionState($data['state']));
         $institution->setCreatedAt($this->buildInstitutionCreatedAt($data['createdAt']));
         if (isset($data['logo'])) {
-            $institution->setLogo($this->buildInstitutionLogo($data['logo']));
+            
         }
         if (isset($data['updatedAt'])) {
             $institution->setUpdatedAt($this->buildInstitutionUpdatedAt($data['updatedAt']));


202) /var/www/abacusSystem-new/src/core/Institution/Application/Factory/InstitutionFactory.php:65    [M] MethodCallRemoval

@@ @@
             $institution->setLogo($this->buildInstitutionLogo($data['logo']));
         }
         if (isset($data['updatedAt'])) {
-            $institution->setUpdatedAt($this->buildInstitutionUpdatedAt($data['updatedAt']));
+            
         }
         return $institution;
     }


203) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/CreateInstitution/CreateInstitution.php:30    [M] MethodCallRemoval

@@ @@
         $this->validateRequest($request, CreateInstitutionRequest::class);
         /** @var CreateInstitutionRequest $request */
         $institution = $request->institution();
-        $institution->refreshSearch();
+        
         /** @var CreateInstitutionRequest $request */
         return $this->institutionRepository->persistInstitution($institution);
     }
 }


204) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/UpdateInstitution/UpdateInstitution.php:32    [M] UnwrapUcFirst

@@ @@
         /** @var UpdateInstitutionRequest $request */
         $institution = $this->institutionRepository->find($request->id());
         foreach ($request->data() as $field => $value) {
-            $methodName = 'change' . ucfirst($field);
+            $methodName = 'change' . $field;
             if (is_callable([$this, $methodName])) {
                 $institution = $this->{$methodName}($institution, $value);
             }


205) /var/www/abacusSystem-new/src/core/Institution/Domain/ValueObjects/InstitutionId.php:19    [M] MethodCallRemoval

@@ @@
     public function __construct(?int $value = null)
     {
         if (!is_null($value)) {
-            $this->validate($value);
+            
         }
         $this->value = $value;
     }


206) /var/www/abacusSystem-new/src/core/Institution/Domain/ValueObjects/InstitutionId.php:44    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = [];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


207) /var/www/abacusSystem-new/src/core/Institution/Domain/ValueObjects/InstitutionId.php:45    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => []];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


208) /var/www/abacusSystem-new/src/core/Institution/Domain/ValueObjects/InstitutionId.php:46    [M] DecrementInteger

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => ['min_range' => 0]];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


209) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Eloquent/Model/Institution.php:76    [M] ArrayItemRemoval

@@ @@
     protected $casts = ['created_at' => 'datetime', 'updated_at' => 'datetime', 'deleted_at' => 'datetime'];
     protected function casts(): array
     {
-        return ['created_at' => 'datetime:Y-m-d H:i:s', 'updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
+        return ['updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
     }
     public function getSearchField(): string
     {


210) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/EloquentInstitutionRepository.php:82    [M] LogicalAnd

@@ @@
     public function getAll(array $filters = []): Institutions
     {
         $builder = $this->databaseManager->table($this->getTable())->where('inst_state', '>', ValueObjectStatus::STATE_DELETE);
-        if (array_key_exists('q', $filters) && isset($filters['q'])) {
+        if (array_key_exists('q', $filters) || isset($filters['q'])) {
             $builder->whereFullText($this->model->getSearchField(), $filters['q']);
         }
         $institutionCollection = $builder->get(['inst_id']);


211) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/RedisInstitutionRepository.php:111    [M] ConcatOperandRemoval

@@ @@
             Redis::set($institutionKey, json_encode($institutionData));
         } catch (Exception $exception) {
             $this->logger->error($exception->getMessage(), $exception->getTrace());
-            throw new InstitutionPersistException('It could not persist Institution with key ' . $institutionKey . ' in redis');
+            throw new InstitutionPersistException('It could not persist Institution with key ' . $institutionKey);
         }
         return $institution;
     }


212) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:48    [M] MethodCallRemoval

@@ @@
     public function toDomain(): Institution
     {
         $institution = $this->institutionFactory->buildInstitution($this->institutionFactory->buildInstitutionId($this->institution->id()), $this->institutionFactory->buildInstitutionName($this->institution->name()));
-        $institution->setShortname($this->institutionFactory->buildInstitutionShortname($this->institution->shortname()));
+        
         $institution->setCode($this->institutionFactory->buildInstitutionCode($this->institution->code()));
         $institution->setLogo($this->institutionFactory->buildInstitutionLogo($this->institution->logo()));
         $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));


213) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:49    [M] MethodCallRemoval

@@ @@
     {
         $institution = $this->institutionFactory->buildInstitution($this->institutionFactory->buildInstitutionId($this->institution->id()), $this->institutionFactory->buildInstitutionName($this->institution->name()));
         $institution->setShortname($this->institutionFactory->buildInstitutionShortname($this->institution->shortname()));
-        $institution->setCode($this->institutionFactory->buildInstitutionCode($this->institution->code()));
+        
         $institution->setLogo($this->institutionFactory->buildInstitutionLogo($this->institution->logo()));
         $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));
         $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));


214) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:50    [M] MethodCallRemoval

@@ @@
         $institution = $this->institutionFactory->buildInstitution($this->institutionFactory->buildInstitutionId($this->institution->id()), $this->institutionFactory->buildInstitutionName($this->institution->name()));
         $institution->setShortname($this->institutionFactory->buildInstitutionShortname($this->institution->shortname()));
         $institution->setCode($this->institutionFactory->buildInstitutionCode($this->institution->code()));
-        $institution->setLogo($this->institutionFactory->buildInstitutionLogo($this->institution->logo()));
+        
         $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));
         $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));
         $institution->setCreatedAt($this->institutionFactory->buildInstitutionCreatedAt($this->institution->createdAt()));


215) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:51    [M] MethodCallRemoval

@@ @@
         $institution->setShortname($this->institutionFactory->buildInstitutionShortname($this->institution->shortname()));
         $institution->setCode($this->institutionFactory->buildInstitutionCode($this->institution->code()));
         $institution->setLogo($this->institutionFactory->buildInstitutionLogo($this->institution->logo()));
-        $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));
+        
         $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));
         $institution->setCreatedAt($this->institutionFactory->buildInstitutionCreatedAt($this->institution->createdAt()));
         $institution->setUpdatedAt($this->institutionFactory->buildInstitutionUpdatedAt($this->institution->updatedAt()));


216) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:52    [M] MethodCallRemoval

@@ @@
         $institution->setCode($this->institutionFactory->buildInstitutionCode($this->institution->code()));
         $institution->setLogo($this->institutionFactory->buildInstitutionLogo($this->institution->logo()));
         $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));
-        $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));
+        
         $institution->setCreatedAt($this->institutionFactory->buildInstitutionCreatedAt($this->institution->createdAt()));
         $institution->setUpdatedAt($this->institutionFactory->buildInstitutionUpdatedAt($this->institution->updatedAt()));
         $institution->setSearch($this->institutionFactory->buildInstitutionSearch($this->institution->search()));


217) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:53    [M] MethodCallRemoval

@@ @@
         $institution->setLogo($this->institutionFactory->buildInstitutionLogo($this->institution->logo()));
         $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));
         $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));
-        $institution->setCreatedAt($this->institutionFactory->buildInstitutionCreatedAt($this->institution->createdAt()));
+        
         $institution->setUpdatedAt($this->institutionFactory->buildInstitutionUpdatedAt($this->institution->updatedAt()));
         $institution->setSearch($this->institutionFactory->buildInstitutionSearch($this->institution->search()));
         return $institution;


218) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:54    [M] MethodCallRemoval

@@ @@
         $institution->setState($this->institutionFactory->buildInstitutionState($this->institution->state()));
         $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));
         $institution->setCreatedAt($this->institutionFactory->buildInstitutionCreatedAt($this->institution->createdAt()));
-        $institution->setUpdatedAt($this->institutionFactory->buildInstitutionUpdatedAt($this->institution->updatedAt()));
+        
         $institution->setSearch($this->institutionFactory->buildInstitutionSearch($this->institution->search()));
         return $institution;
     }


219) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Translators/InstitutionTranslator.php:55    [M] MethodCallRemoval

@@ @@
         $institution->setObservations($this->institutionFactory->buildInstitutionObservations($this->institution->observations()));
         $institution->setCreatedAt($this->institutionFactory->buildInstitutionCreatedAt($this->institution->createdAt()));
         $institution->setUpdatedAt($this->institutionFactory->buildInstitutionUpdatedAt($this->institution->updatedAt()));
-        $institution->setSearch($this->institutionFactory->buildInstitutionSearch($this->institution->search()));
+        
         return $institution;
     }
     public function setCollection(array $collection): self


220) /var/www/abacusSystem-new/src/core/Profile/Application/Factory/ModuleFactory.php:42    [M] MethodCallRemoval

@@ @@
         if (isset($data['position'])) {
             $module->position()->setValue($data['position']);
         }
-        $module->createdAt()->setValue($data['createdAt']);
+        
         if (isset($data['updatedAt'])) {
             $module->updatedAt()->setValue($data['updatedAt']);
         }


221) /var/www/abacusSystem-new/src/core/Profile/Application/Factory/ModuleFactory.php:45    [M] MethodCallRemoval

@@ @@
         }
         $module->createdAt()->setValue($data['createdAt']);
         if (isset($data['updatedAt'])) {
-            $module->updatedAt()->setValue($data['updatedAt']);
+            
         }
         return $module;
     }


222) /var/www/abacusSystem-new/src/core/Profile/Application/Factory/ModuleFactory.php:142    [M] DecrementInteger

@@ @@
     {
         return new ModuleSearch($search);
     }
-    public function buildModulePosition(int $position = 1): ModulePosition
+    public function buildModulePosition(int $position = 0): ModulePosition
     {
         return new ModulePosition($position);
     }
 }


223) /var/www/abacusSystem-new/src/core/Profile/Application/Factory/ModuleFactory.php:142    [M] IncrementInteger

@@ @@
     {
         return new ModuleSearch($search);
     }
-    public function buildModulePosition(int $position = 1): ModulePosition
+    public function buildModulePosition(int $position = 2): ModulePosition
     {
         return new ModulePosition($position);
     }
 }


224) /var/www/abacusSystem-new/src/core/Profile/Application/Factory/ProfileFactory.php:40    [M] MethodCallRemoval

@@ @@
         $profile->setDescription($this->buildProfileDescription($data['description']));
         $profile->setModulesAggregator($data['modulesAggregator']);
         if (isset($data['updatedAt'])) {
-            $profile->updatedAt()->setValue($data['updatedAt']);
+            
         }
         return $profile;
     }


225) /var/www/abacusSystem-new/src/core/Profile/Application/UseCases/UpdateProfile/UpdateProfile.php:28    [M] UnwrapUcFirst

@@ @@
         /** @var UpdateProfileRequest $request */
         $profile = $this->profileRepository->find($request->profileId());
         foreach ($request->data() as $field => $value) {
-            $methodName = 'change' . \ucfirst($field);
+            $methodName = 'change' . $field;
             if (is_callable([$this, $methodName])) {
                 $profile = $this->{$methodName}($profile, $value);
             }


226) /var/www/abacusSystem-new/src/core/Profile/Application/UseCasesModule/UpdateModule/UpdateModule.php:28    [M] UnwrapUcFirst

@@ @@
         /** @var UpdateModuleRequest $request */
         $module = $this->moduleRepository->find($request->moduleId());
         foreach ($request->data() as $field => $value) {
-            $methodName = 'change' . \ucfirst($field);
+            $methodName = 'change' . $field;
             if (\is_callable([$this, $methodName])) {
                 $module = $this->{$methodName}($module, $value);
             }


227) /var/www/abacusSystem-new/src/core/Profile/Domain/Modules.php:47    [M] MethodCallRemoval

@@ @@
     }
     public function moduleElementsOfKey(string $menuKey): array
     {
-        $this->rewind();
+        
         $modulesKeys = [];
         /** @var Module $item */
         foreach ($this as $item) {


228) /var/www/abacusSystem-new/src/core/Profile/Domain/Modules.php:57    [M] ArrayOneItem

@@ @@
                 $modulesKeys[] = $item;
             }
         }
-        return $modulesKeys;
+        return (count($modulesKeys) > 1) ? array_slice($modulesKeys, 0, 1, true) : $modulesKeys;
     }
     public function addId(int $id): self
     {


229) /var/www/abacusSystem-new/src/core/Profile/Domain/Profiles.php:13    [M] Foreach_

@@ @@
     public const TYPE = 'profiles';
     public function __construct(Profile ...$profiles)
     {
-        foreach ($profiles as $profile) {
+        foreach ([] as $profile) {
             $this->addItem($profile);
         }
     }


230) /var/www/abacusSystem-new/src/core/Profile/Domain/Profiles.php:14    [M] MethodCallRemoval

@@ @@
     public function __construct(Profile ...$profiles)
     {
         foreach ($profiles as $profile) {
-            $this->addItem($profile);
+            
         }
     }
     /**


231) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Management/ProfileService.php:73    [M] IfNegation

@@ @@
         foreach ($profile->modulesAggregator() as $item) {
             try {
                 $module = $this->moduleService->searchModuleById($item);
-                if ($module->state()->isActivated()) {
+                if (!$module->state()->isActivated()) {
                     $modules->addItem($module);
                 }
             } catch (Exception $exception) {


232) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Management/ProfileService.php:74    [M] MethodCallRemoval

@@ @@
             try {
                 $module = $this->moduleService->searchModuleById($item);
                 if ($module->state()->isActivated()) {
-                    $modules->addItem($module);
+                    
                 }
             } catch (Exception $exception) {
                 $this->logger->warning($exception->getMessage(), $exception->getTrace());


233) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Management/ProfileService.php:80    [M] MethodCallRemoval

@@ @@
                 $this->logger->warning($exception->getMessage(), $exception->getTrace());
             }
         }
-        $profile->setModules($modules);
+        
         return $profile;
     }
     /**


234) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Eloquent/Model/Module.php:80    [M] ArrayItemRemoval

@@ @@
     protected string $mainSearchField = 'mod_search';
     protected function casts(): array
     {
-        return ['created_at' => 'datetime:Y-m-d H:i:s', 'updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
+        return ['updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
     }
     public function getSearchField(): string
     {


235) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Eloquent/Model/Profile.php:78    [M] ArrayItemRemoval

@@ @@
     protected string $mainSearchField = 'pro_search';
     protected function casts(): array
     {
-        return ['created_at' => 'datetime:Y-m-d H:i:s', 'updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
+        return ['updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s'];
     }
     public function getSearchField(): string
     {


236) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentModuleRepository.php:105    [M] LogicalAnd

@@ @@
     {
         /** @var Builder $builder */
         $builder = $this->database->table($this->getTable())->where('mod_state', '>', ValueObjectStatus::STATE_DELETE);
-        if (array_key_exists('q', $filters) && isset($filters['q'])) {
+        if (array_key_exists('q', $filters) || isset($filters['q'])) {
             $builder->whereFullText($this->model->getSearchField(), $filters['q']);
         }
         $builder->orderBy('mod_position');


237) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentModuleRepository.php:148    [M] MethodCallRemoval

@@ @@
             throw new ModuleNotFoundException('Module not found with id: ' . $id->value());
         }
         $moduleModel = $this->updateAttributesModelModule((array) $data);
-        $moduleModel->changeState(ValueObjectStatus::STATE_DELETE);
+        
         $moduleModel->changeDeletedAt(new \DateTime());
         $dataModel = $moduleModel->toArray();
         $builder->update($dataModel);


238) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentModuleRepository.php:149    [M] MethodCallRemoval

@@ @@
         }
         $moduleModel = $this->updateAttributesModelModule((array) $data);
         $moduleModel->changeState(ValueObjectStatus::STATE_DELETE);
-        $moduleModel->changeDeletedAt(new \DateTime());
+        
         $dataModel = $moduleModel->toArray();
         $builder->update($dataModel);
     }


239) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentModuleRepository.php:160    [M] CastArray

@@ @@
         $builder = $this->database->table($this->getTable());
         $builder->where('mod_id', $domain->id()->value());
         $data = $builder->first();
-        $model = $this->updateAttributesModelModule((array) $data);
+        $model = $this->updateAttributesModelModule($data);
         $model->changeId($domain->id()->value());
         $model->changeName($domain->name()->value());
         $model->changeMenuKey($domain->menuKey()->value());


240) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentModuleRepository.php:169    [M] MethodCallRemoval

@@ @@
         $model->changeIcon($domain->icon()->value());
         $model->changeState($domain->state()->value());
         $model->changeSearch($domain->search()->value());
-        $model->changePosition($domain->position()->value());
+        
         $model->changeCreatedAt($domain->createdAt()->value());
         if (!is_null($domain->updatedAt()->value())) {
             $model->changeUpdatedAt($domain->updatedAt()->value());


241) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentProfileRepository.php:96    [M] LogicalAnd

@@ @@
         /** @var Builder $builder */
         $builder = $this->database->table($this->getTable());
         $builder->where('pro_state', '>', ValueObjectStatus::STATE_DELETE);
-        if (array_key_exists('q', $filters) && isset($filters['q'])) {
+        if (array_key_exists('q', $filters) || isset($filters['q'])) {
             $builder->whereFullText($this->model->getSearchField(), $filters['q']);
         }
         $profileCollection = $builder->get(['pro_id']);


242) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentProfileRepository.php:188    [M] CastArray

@@ @@
         $builder = $this->database->table($this->getTable());
         $builder->where('pro_id', $domain->id()->value());
         $data = $builder->first();
-        $model = $this->updateAttributesModelProfile((array) $data);
+        $model = $this->updateAttributesModelProfile($data);
         $model->changeId($domain->id()->value());
         $model->changeName($domain->name()->value());
         $model->changeState($domain->state()->value());


243) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/EloquentProfileRepository.php:207    [M] TrueValue

@@ @@
     private function updateAttributesModelProfile(array $data = []): ProfileModel
     {
         $this->model->fill($data);
-        $this->model->exists = true;
+        $this->model->exists = false;
         return $this->model;
     }
     private function getTable(): string


244) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/RedisModuleRepository.php:74    [M] LogicalNot

@@ @@
         if (!is_null($data)) {
             $dataArray = json_decode($data, true);
             $dataArray['createdAt'] = new \DateTime($dataArray['createdAt']['date']);
-            if (!is_null($dataArray['updatedAt'])) {
+            if (is_null($dataArray['updatedAt'])) {
                 $dataArray['updatedAt'] = new \DateTime($dataArray['updatedAt']['date']);
             }
             /** @var Module */


245) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/RedisProfileRepository.php:80    [M] LogicalNot

@@ @@
         if (!is_null($data)) {
             $dataArray = json_decode($data, true);
             $dataArray['createdAt'] = new DateTime($dataArray['createdAt']['date']);
-            if (!is_null($dataArray['updatedAt'])) {
+            if (is_null($dataArray['updatedAt'])) {
                 $dataArray['updatedAt'] = new DateTime($dataArray['updatedAt']['date']);
             }
             return $this->profileFactory->buildProfileFromArray($dataArray);


246) /var/www/abacusSystem-new/src/core/User/Application/UseCases/DeleteUser/DeleteUser.php:26    [M] MethodCallRemoval

@@ @@
      */
     public function execute(RequestService $request): null
     {
-        $this->validateRequest($request, DeleteUserRequest::class);
+        
         /** @var DeleteUserRequest $request */
         $this->userRepository->delete($request->userId());
         return null;
     }
 }


247) /var/www/abacusSystem-new/src/core/User/Application/UseCases/UpdateUser/UpdateUser.php:35    [M] UnwrapUcFirst

@@ @@
         /** @var UpdateUserRequest $request */
         $user = $this->userRepository->find($request->userId());
         foreach ($request->data() as $field => $value) {
-            $methodName = 'change' . \ucfirst($field);
+            $methodName = 'change' . $field;
             if (\is_callable([$this, $methodName])) {
                 $user = $this->{$methodName}($user, $value);
             }


248) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserEmployeeId.php:35    [M] MethodCallRemoval

@@ @@
      */
     public function setValue($value): self
     {
-        $this->validate($value);
+        
         $this->value = $value;
         return $this;
     }


249) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserEmployeeId.php:44    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $id): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = [];
         if (!filter_var($id, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $id));
         }
     }
 }


250) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserEmployeeId.php:45    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $id): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => []];
         if (!filter_var($id, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $id));
         }
     }
 }


251) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserEmployeeId.php:46    [M] DecrementInteger

@@ @@
     }
     private function validate(int $id): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => ['min_range' => 0]];
         if (!filter_var($id, FILTER_VALIDATE_INT, $options)) {
             throw new InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $id));
         }
     }
 }


252) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserId.php:34    [M] MethodCallRemoval

@@ @@
      */
     public function setValue($value): self
     {
-        $this->validate($value);
+        
         $this->value = $value;
         return $this;
     }


253) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserId.php:42    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = [];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new \InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


254) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserId.php:43    [M] ArrayItemRemoval

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => []];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new \InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


255) /var/www/abacusSystem-new/src/core/User/Domain/ValueObjects/UserId.php:44    [M] DecrementInteger

@@ @@
     }
     private function validate(int $value): void
     {
-        $options = ['options' => ['min_range' => 1]];
+        $options = ['options' => ['min_range' => 0]];
         if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
             throw new \InvalidArgumentException(sprintf('<%s> does not allow the value <%s>.', static::class, $value));
         }
     }
 }


256) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Eloquent/Model/User.php:95    [M] ArrayItemRemoval

@@ @@
     protected string $mainSearchField = 'user_login';
     protected function casts(): array
     {
-        return ['created_at' => 'datetime:Y-m-d H:i:s', 'updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s', 'email_verified_at' => 'datetime:Y-m-d H:i:s'];
+        return ['updated_at' => 'datetime:Y-m-d H:i:s', 'deleted_at' => 'datetime:Y-m-d H:i:s', 'email_verified_at' => 'datetime:Y-m-d H:i:s'];
     }
     public function getSearchField(): string
     {


257) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/EloquentUserRepository.php:130    [M] CastArray

@@ @@
         if (is_null($dataUser)) {
             throw new UserNotFoundException('User not found with id: ' . $id->value());
         }
-        $userModel = $this->updateAttributesModelUser((array) $dataUser);
+        $userModel = $this->updateAttributesModelUser($dataUser);
         $userModel->changeState(ValueObjectStatus::STATE_DELETE);
         $userModel->changeDeletedAt(new \DateTime());
         $builder->update($userModel->toArray());


258) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/EloquentUserRepository.php:131    [M] MethodCallRemoval

@@ @@
             throw new UserNotFoundException('User not found with id: ' . $id->value());
         }
         $userModel = $this->updateAttributesModelUser((array) $dataUser);
-        $userModel->changeState(ValueObjectStatus::STATE_DELETE);
+        
         $userModel->changeDeletedAt(new \DateTime());
         $builder->update($userModel->toArray());
     }


259) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/EloquentUserRepository.php:132    [M] MethodCallRemoval

@@ @@
         }
         $userModel = $this->updateAttributesModelUser((array) $dataUser);
         $userModel->changeState(ValueObjectStatus::STATE_DELETE);
-        $userModel->changeDeletedAt(new \DateTime());
+        
         $builder->update($userModel->toArray());
     }
     /**


260) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/EloquentUserRepository.php:145    [M] CastArray

@@ @@
         $builder = $this->database->table($this->getTable());
         $builder->where('user_id', $domain->id()->value());
         $data = $builder->first();
-        $model = $this->updateAttributesModelUser((array) $data);
+        $model = $this->updateAttributesModelUser($data);
         $model->changeId($domain->id()->value());
         $model->changeEmployeeId($domain->employeeId()->value());
         $model->changeProfileId($domain->profileId()->value());


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:41    [M] ProtectedVisibility

@@ @@
     /**
      * @throws RouteNotFoundException
      */
-    protected function validateRoute(string $route): void
+    private function validateRoute(string $route): void
     {
         $routes = $this->router->getRoutes();
         $slugs = [];


2) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:46    [M] Foreach_

@@ @@
         $routes = $this->router->getRoutes();
         $slugs = [];
         /** @var Route $item */
-        foreach ($routes as $item) {
+        foreach ([] as $item) {
             $method = $item->methods();
             if ($method[0] === 'GET') {
                 $slugs[] = $item->uri();


3) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:48    [M] IncrementInteger

@@ @@
         /** @var Route $item */
         foreach ($routes as $item) {
             $method = $item->methods();
-            if ($method[0] === 'GET') {
+            if ($method[1] === 'GET') {
                 $slugs[] = $item->uri();
             }
         }


4) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:48    [M] Identical

@@ @@
         /** @var Route $item */
         foreach ($routes as $item) {
             $method = $item->methods();
-            if ($method[0] === 'GET') {
+            if ($method[0] !== 'GET') {
                 $slugs[] = $item->uri();
             }
         }


5) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:52    [M] UnwrapArrayUnique

@@ @@
                 $slugs[] = $item->uri();
             }
         }
-        $slugs = array_unique($slugs);
+        $slugs = $slugs;
         try {
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {


6) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:55    [M] MethodCallRemoval

@@ @@
         }
         $slugs = array_unique($slugs);
         try {
-            Assertion::inArray($route, $slugs);
+            
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
             throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);


7) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:57    [M] Concat

@@ @@
         try {
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
-            $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
+            $this->logger->warning($route . 'Route not found - Route: ', $exception->getTrace());
             throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


8) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:57    [M] ConcatOperandRemoval

@@ @@
         try {
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
-            $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
+            $this->logger->warning($route, $exception->getTrace());
             throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


9) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:57    [M] ConcatOperandRemoval

@@ @@
         try {
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
-            $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
+            $this->logger->warning('Route not found - Route: ', $exception->getTrace());
             throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


10) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:57    [M] MethodCallRemoval

@@ @@
         try {
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
-            $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
+            
             throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


11) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:59    [M] Concat

@@ @@
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
-            throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
+            throw new RouteNotFoundException($route . 'Route <' . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


12) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:59    [M] ConcatOperandRemoval

@@ @@
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
-            throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
+            throw new RouteNotFoundException($route . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


13) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:59    [M] ConcatOperandRemoval

@@ @@
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
-            throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
+            throw new RouteNotFoundException('Route <' . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


14) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:59    [M] Concat

@@ @@
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
-            throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
+            throw new RouteNotFoundException('Route <' . '> not found' . $route, Response::HTTP_NOT_FOUND);
         }
     }
 }


15) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:59    [M] ConcatOperandRemoval

@@ @@
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
-            throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
+            throw new RouteNotFoundException('Route <' . $route, Response::HTTP_NOT_FOUND);
         }
     }
 }


16) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ModuleActions/ModuleActionExecutor.php:59    [M] Throw_

@@ @@
             Assertion::inArray($route, $slugs);
         } catch (AssertionFailedException $exception) {
             $this->logger->warning('Route not found - Route: ' . $route, $exception->getTrace());
-            throw new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
+            new RouteNotFoundException('Route <' . $route . '> not found', Response::HTTP_NOT_FOUND);
         }
     }
 }


17) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/ProfileActionExecutor.php:28    [M] ProtectedVisibility

@@ @@
     {
         $this->orchestratorHandler = $orchestratorHandler;
     }
-    protected function getModulesAggregator(Request $request): array
+    private function getModulesAggregator(Request $request): array
     {
         $modulesAggregator = [];
         foreach ($request->input('modules') as $item) {


18) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/ProfileActionExecutor.php:31    [M] Foreach_

@@ @@
     protected function getModulesAggregator(Request $request): array
     {
         $modulesAggregator = [];
-        foreach ($request->input('modules') as $item) {
+        foreach ([] as $item) {
             $modulesAggregator[] = $item['id'];
         }
         return $modulesAggregator;
     }
 }


19) /var/www/abacusSystem-new/app/Http/Controllers/ActionExecutors/ProfileActions/ProfileActionExecutor.php:35    [M] ArrayOneItem

@@ @@
         foreach ($request->input('modules') as $item) {
             $modulesAggregator[] = $item['id'];
         }
-        return $modulesAggregator;
+        return (count($modulesAggregator) > 1) ? array_slice($modulesAggregator, 0, 1, true) : $modulesAggregator;
     }
 }


20) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:31    [M] PublicVisibility

@@ @@
         $this->logger = $logger;
         $this->viewFactory = $viewFactory;
     }
-    public function renderView(string $html, int $code = Response::HTTP_OK): JsonResponse|string
+    protected function renderView(string $html, int $code = Response::HTTP_OK): JsonResponse|string
     {
         /** @var Request $requestService */
         $requestService = app(Request::class);


21) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:36    [M] IfNegation

@@ @@
     {
         /** @var Request $requestService */
         $requestService = app(Request::class);
-        if ($requestService->ajax()) {
+        if (!$requestService->ajax()) {
             $response = new JsonResponse(['html' => $html], $code);
             return $response->header('Cache-Control', 'no-cache, no-store, must-revalidate')->header('Pragma', 'no-cache')->header('Expires', '0');
         }


22) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:37    [M] ArrayItemRemoval

@@ @@
         /** @var Request $requestService */
         $requestService = app(Request::class);
         if ($requestService->ajax()) {
-            $response = new JsonResponse(['html' => $html], $code);
+            $response = new JsonResponse([], $code);
             return $response->header('Cache-Control', 'no-cache, no-store, must-revalidate')->header('Pragma', 'no-cache')->header('Expires', '0');
         }
         return $html;


23) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:47    [M] PublicVisibility

@@ @@
         }
         return $html;
     }
-    public function getPagination(?string $route = null): string
+    protected function getPagination(?string $route = null): string
     {
         if (is_null($route)) {
             /** @var Router $routerService */


24) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:49    [M] IfNegation

@@ @@
     }
     public function getPagination(?string $route = null): string
     {
-        if (is_null($route)) {
+        if (!is_null($route)) {
             /** @var Router $routerService */
             $routerService = app(Router::class);
             $route = $routerService->current()->uri();


25) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:56    [M] ArrayItemRemoval

@@ @@
             $routerService = app(Router::class);
             $route = $routerService->current()->uri();
         }
-        return json_encode(['start' => 0, 'filters' => [], 'uri' => $route]);
+        return json_encode(['filters' => [], 'uri' => $route]);
     }
     protected function retrieveMenuOptionHtml(array $item, ?string $permission = null): string
     {


26) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:57    [M] DecrementInteger

@@ @@
             $routerService = app(Router::class);
             $route = $routerService->current()->uri();
         }
-        return json_encode(['start' => 0, 'filters' => [], 'uri' => $route]);
+        return json_encode(['start' => -1, 'filters' => [], 'uri' => $route]);
     }
     protected function retrieveMenuOptionHtml(array $item, ?string $permission = null): string
     {


27) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:57    [M] IncrementInteger

@@ @@
             $routerService = app(Router::class);
             $route = $routerService->current()->uri();
         }
-        return json_encode(['start' => 0, 'filters' => [], 'uri' => $route]);
+        return json_encode(['start' => 1, 'filters' => [], 'uri' => $route]);
     }
     protected function retrieveMenuOptionHtml(array $item, ?string $permission = null): string
     {


28) /var/www/abacusSystem-new/app/Http/Controllers/Controller.php:63    [M] ProtectedVisibility

@@ @@
         }
         return json_encode(['start' => 0, 'filters' => [], 'uri' => $route]);
     }
-    protected function retrieveMenuOptionHtml(array $item, ?string $permission = null): string
+    private function retrieveMenuOptionHtml(array $item, ?string $permission = null): string
     {
         return $this->viewFactory->make('components.menu-options-datatable')->with('item', $item)->with('permission', $permission)->render();
     }
 }


29) /var/www/abacusSystem-new/app/Http/Middleware/OnlyAjaxRequest.php:28    [M] PublicVisibility

@@ @@
      *
      * @param  Closure(Request): (Response)  $next
      */
-    public function handle(Request $request, Closure $next): Closure|Response
+    protected function handle(Request $request, Closure $next): Closure|Response
     {
         if (!$request->ajax()) {
             return $this->redirector->route('index');


30) /var/www/abacusSystem-new/app/Http/Middleware/OnlyAjaxRequest.php:30    [M] LogicalNot

@@ @@
      */
     public function handle(Request $request, Closure $next): Closure|Response
     {
-        if (!$request->ajax()) {
+        if ($request->ajax()) {
             return $this->redirector->route('index');
         }
         return $next($request);
     }
 }


31) /var/www/abacusSystem-new/app/Http/Middleware/OnlyAjaxRequest.php:34    [M] FunctionCall

@@ @@
         if (!$request->ajax()) {
             return $this->redirector->route('index');
         }
-        return $next($request);
+        $next($request);
+        return null;
     }
 }


32) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:33    [M] PublicVisibility

@@ @@
      *
      * @param Closure(Request): (Response) $next
      */
-    public function handle(Request $request, Closure $next): Response
+    protected function handle(Request $request, Closure $next): Response
     {
         if (!$this->session->exists(['user', 'profile', 'employee'])) {
             if ($request->ajax()) {


33) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:35    [M] ArrayItemRemoval

@@ @@
      */
     public function handle(Request $request, Closure $next): Response
     {
-        if (!$this->session->exists(['user', 'profile', 'employee'])) {
+        if (!$this->session->exists(['profile', 'employee'])) {
             if ($request->ajax()) {
                 return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
             }


34) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:35    [M] LogicalNot

@@ @@
      */
     public function handle(Request $request, Closure $next): Response
     {
-        if (!$this->session->exists(['user', 'profile', 'employee'])) {
+        if ($this->session->exists(['user', 'profile', 'employee'])) {
             if ($request->ajax()) {
                 return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
             }


35) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:37    [M] IfNegation

@@ @@
     public function handle(Request $request, Closure $next): Response
     {
         if (!$this->session->exists(['user', 'profile', 'employee'])) {
-            if ($request->ajax()) {
+            if (!$request->ajax()) {
                 return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
             }
             return $this->redirector->to('/');


36) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:39    [M] ArrayItemRemoval

@@ @@
     {
         if (!$this->session->exists(['user', 'profile', 'employee'])) {
             if ($request->ajax()) {
-                return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
+                return new JsonResponse(['error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
             }
             return $this->redirector->to('/');
         }


37) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:42    [M] DecrementInteger

@@ @@
     {
         if (!$this->session->exists(['user', 'profile', 'employee'])) {
             if ($request->ajax()) {
-                return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
+                return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 400], Response::HTTP_UNAUTHORIZED);
             }
             return $this->redirector->to('/');
         }


38) /var/www/abacusSystem-new/app/Http/Middleware/VerifySession.php:42    [M] IncrementInteger

@@ @@
     {
         if (!$this->session->exists(['user', 'profile', 'employee'])) {
             if ($request->ajax()) {
-                return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 401], Response::HTTP_UNAUTHORIZED);
+                return new JsonResponse(['error' => 'unauthorized', 'error_description' => 'Failed authentication', 'reason' => 402], Response::HTTP_UNAUTHORIZED);
             }
             return $this->redirector->to('/');
         }


39) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:21    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(ModuleManagementContract $moduleManagement)
     {
-        parent::__construct($moduleManagement);
+        
     }
     /**
      * @param Request $request


40) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:36    [M] LogicalOr

@@ @@
         /** @var Module $module */
         $module = $this->moduleManagement->searchModuleById($moduleId);
         $state = $module->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if ($state->isNew() && $state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


41) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:36    [M] LogicalOrAllSubExprNegation

@@ @@
         /** @var Module $module */
         $module = $this->moduleManagement->searchModuleById($moduleId);
         $state = $module->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if (!$state->isNew() || !$state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


42) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:36    [M] LogicalOrNegation

@@ @@
         /** @var Module $module */
         $module = $this->moduleManagement->searchModuleById($moduleId);
         $state = $module->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if (!($state->isNew() || $state->isInactivated())) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


43) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:36    [M] LogicalOrSingleSubExprNegation

@@ @@
         /** @var Module $module */
         $module = $this->moduleManagement->searchModuleById($moduleId);
         $state = $module->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if (!$state->isNew() || $state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


44) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:36    [M] LogicalOrSingleSubExprNegation

@@ @@
         /** @var Module $module */
         $module = $this->moduleManagement->searchModuleById($moduleId);
         $state = $module->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if ($state->isNew() || !$state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


45) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:37    [M] MethodCallRemoval

@@ @@
         $module = $this->moduleManagement->searchModuleById($moduleId);
         $state = $module->state();
         if ($state->isNew() || $state->isInactivated()) {
-            $state->activate();
+            
         } elseif ($state->isActivated()) {
             $state->inactive();
         }


46) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:38    [M] ElseIfNegation

@@ @@
         $state = $module->state();
         if ($state->isNew() || $state->isInactivated()) {
             $state->activate();
-        } elseif ($state->isActivated()) {
+        } elseif (!$state->isActivated()) {
             $state->inactive();
         }
         $dataUpdate['state'] = $state->value();


47) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/ChangeStateModuleOrchestrator.php:39    [M] MethodCallRemoval

@@ @@
         if ($state->isNew() || $state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
-            $state->inactive();
+            
         }
         $dataUpdate['state'] = $state->value();
         $dataUpdate['updatedAt'] = $this->getCurrentTime();


48) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:22    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(ModuleManagementContract $moduleManagement)
     {
-        parent::__construct($moduleManagement);
+        
     }
     /**
      * @param Request $request


49) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


50) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:33    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['id' => null, 'key' > $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


51) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:34    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' > $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


52) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:35    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' > $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


53) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:36    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' > $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


54) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:37    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' > $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


55) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:39    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Module
     {
-        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' > $this->getCurrentTime()];
         return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
     }
     /**


56) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/CreateModuleOrchestrator.php:42    [M] ArrayItemRemoval

@@ @@
     public function make(Request $request): Module
     {
         $dataModule = ['id' => null, 'key' => $request->input('key'), 'name' => $request->input('name'), 'route' => $request->input('route'), 'icon' => $request->input('icon'), 'position' => $request->input('position'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
-        return $this->moduleManagement->createModule([Module::TYPE => $dataModule]);
+        return $this->moduleManagement->createModule([]);
     }
     /**
      * @return string


57) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DeleteModuleOrchestrator.php:17    [M] MethodCallRemoval

@@ @@
 {
     public function __construct(ModuleManagementContract $moduleManagement)
     {
-        parent::__construct($moduleManagement);
+        
     }
     /**
      * @param Request $request


58) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DeleteModuleOrchestrator.php:26    [M] MethodCallRemoval

@@ @@
      */
     public function make(Request $request): bool
     {
-        $this->moduleManagement->deleteModule($request->input('moduleId'));
+        
         return true;
     }
     /**


59) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DeleteModuleOrchestrator.php:28    [M] TrueValue

@@ @@
     public function make(Request $request): bool
     {
         $this->moduleManagement->deleteModule($request->input('moduleId'));
-        return true;
+        return false;
     }
     /**
      * @return string


60) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DetailModuleOrchestrator.php:22    [M] MethodCallRemoval

@@ @@
     private Config $config;
     public function __construct(ModuleManagementContract $moduleManagement, Config $config)
     {
-        parent::__construct($moduleManagement);
+        
         $this->config = $config;
     }
     /**


61) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DetailModuleOrchestrator.php:32    [M] LogicalNot

@@ @@
     public function make(Request $request): array
     {
         $moduleId = $request->input('moduleId');
-        if (!is_null($moduleId)) {
+        if (is_null($moduleId)) {
             /** @var Module $module */
             $module = $this->moduleManagement->searchModuleById($moduleId);
         }


62) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DetailModuleOrchestrator.php:38    [M] ArrayItemRemoval

@@ @@
             /** @var Module $module */
             $module = $this->moduleManagement->searchModuleById($moduleId);
         }
-        return ['moduleId' => $moduleId, 'module' => $module ?? null, 'menuKeys' => $this->config->get('menu.options')];
+        return ['module' => $module ?? null, 'menuKeys' => $this->config->get('menu.options')];
     }
     /**
      * @return string


63) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/DetailModuleOrchestrator.php:41    [M] ArrayItem

@@ @@
             /** @var Module $module */
             $module = $this->moduleManagement->searchModuleById($moduleId);
         }
-        return ['moduleId' => $moduleId, 'module' => $module ?? null, 'menuKeys' => $this->config->get('menu.options')];
+        return ['moduleId' => $moduleId, 'module' => $module ?? null, 'menuKeys' > $this->config->get('menu.options')];
     }
     /**
      * @return string


64) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/GetModulesOrchestrator.php:34    [M] MethodCallRemoval

@@ @@
     private DataTables $dataTables;
     public function __construct(ModuleManagementContract $moduleManagement, ModuleDataTransformerContract $moduleDataTransformer, DataTables $dataTables, ViewFactory $viewFactory)
     {
-        parent::__construct($moduleManagement);
+        
         $this->setViewFactory($viewFactory);
         $this->dataTables = $dataTables;
         $this->moduleDataTransformer = $moduleDataTransformer;


65) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/GetModulesOrchestrator.php:35    [M] MethodCallRemoval

@@ @@
     public function __construct(ModuleManagementContract $moduleManagement, ModuleDataTransformerContract $moduleDataTransformer, DataTables $dataTables, ViewFactory $viewFactory)
     {
         parent::__construct($moduleManagement);
-        $this->setViewFactory($viewFactory);
+        
         $this->dataTables = $dataTables;
         $this->moduleDataTransformer = $moduleDataTransformer;
     }


66) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/GetModulesOrchestrator.php:53    [M] IfNegation

@@ @@
     {
         $modules = $this->moduleManagement->searchModules($request->input('filters'));
         $dataModules = [];
-        if ($modules->count()) {
+        if (!$modules->count()) {
             /** @var Module $item */
             foreach ($modules as $item) {
                 $dataModules[] = $this->moduleDataTransformer->write($item)->readToShare();


67) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/GetModulesOrchestrator.php:55    [M] Foreach_

@@ @@
         $dataModules = [];
         if ($modules->count()) {
             /** @var Module $item */
-            foreach ($modules as $item) {
+            foreach ([] as $item) {
                 $dataModules[] = $this->moduleDataTransformer->write($item)->readToShare();
             }
         }


68) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/GetModulesOrchestrator.php:62    [M] MethodCallRemoval

@@ @@
         }
         $collection = new Collection($dataModules);
         $datatable = $this->dataTables->collection($collection);
-        $datatable->addColumn('tools', function (array $item) {
-            return $this->retrieveMenuOptionHtml($item);
-        });
+        
         return $datatable->escapeColumns([])->toJson();
     }
     /**


69) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Module/UpdateModuleOrchestrator.php:21    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(ModuleManagementContract $moduleManagement)
     {
-        parent::__construct($moduleManagement);
+        
     }
     /**
      * @param Request $request


70) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:21    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(ProfileManagementContract $profileManagement)
     {
-        parent::__construct($profileManagement);
+        
     }
     /**
      * @param Request $request


71) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:34    [M] LogicalOr

@@ @@
         $profileId = $request->input('profileId');
         $profile = $this->profileManagement->searchProfileById($profileId);
         $state = $profile->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if ($state->isNew() && $state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


72) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:34    [M] LogicalOrAllSubExprNegation

@@ @@
         $profileId = $request->input('profileId');
         $profile = $this->profileManagement->searchProfileById($profileId);
         $state = $profile->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if (!$state->isNew() || !$state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


73) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:34    [M] LogicalOrNegation

@@ @@
         $profileId = $request->input('profileId');
         $profile = $this->profileManagement->searchProfileById($profileId);
         $state = $profile->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if (!($state->isNew() || $state->isInactivated())) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


74) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:34    [M] LogicalOrSingleSubExprNegation

@@ @@
         $profileId = $request->input('profileId');
         $profile = $this->profileManagement->searchProfileById($profileId);
         $state = $profile->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if (!$state->isNew() || $state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


75) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:34    [M] LogicalOrSingleSubExprNegation

@@ @@
         $profileId = $request->input('profileId');
         $profile = $this->profileManagement->searchProfileById($profileId);
         $state = $profile->state();
-        if ($state->isNew() || $state->isInactivated()) {
+        if ($state->isNew() || !$state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
             $state->inactive();


76) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:35    [M] MethodCallRemoval

@@ @@
         $profile = $this->profileManagement->searchProfileById($profileId);
         $state = $profile->state();
         if ($state->isNew() || $state->isInactivated()) {
-            $state->activate();
+            
         } elseif ($state->isActivated()) {
             $state->inactive();
         }


77) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:36    [M] ElseIfNegation

@@ @@
         $state = $profile->state();
         if ($state->isNew() || $state->isInactivated()) {
             $state->activate();
-        } elseif ($state->isActivated()) {
+        } elseif (!$state->isActivated()) {
             $state->inactive();
         }
         $dataUpdate['state'] = $state->value();


78) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/ChangeStateProfileOrchestrator.php:37    [M] MethodCallRemoval

@@ @@
         if ($state->isNew() || $state->isInactivated()) {
             $state->activate();
         } elseif ($state->isActivated()) {
-            $state->inactive();
+            
         }
         $dataUpdate['state'] = $state->value();
         $dataUpdate['updateAt'] = $this->getCurrentTime();


79) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:22    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(ProfileManagementContract $profileManagement)
     {
-        parent::__construct($profileManagement);
+        
     }
     /**
      * @param Request $request


80) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function make(Request $request): Profile
     {
-        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataProfile = ['name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->profileManagement->createProfile([Profile::TYPE => $dataProfile]);
     }
     /**


81) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:33    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Profile
     {
-        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataProfile = ['id' => null, 'name' > $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->profileManagement->createProfile([Profile::TYPE => $dataProfile]);
     }
     /**


82) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:34    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Profile
     {
-        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' > $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->profileManagement->createProfile([Profile::TYPE => $dataProfile]);
     }
     /**


83) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:35    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Profile
     {
-        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' > json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->profileManagement->createProfile([Profile::TYPE => $dataProfile]);
     }
     /**


84) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:37    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): Profile
     {
-        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' > $this->getCurrentTime()];
         return $this->profileManagement->createProfile([Profile::TYPE => $dataProfile]);
     }
     /**


85) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/CreateProfileOrchestrator.php:40    [M] ArrayItemRemoval

@@ @@
     public function make(Request $request): Profile
     {
         $dataProfile = ['id' => null, 'name' => $request->input('name'), 'description' => $request->input('description'), 'modulesAggregator' => json_decode($request->input('modulesAggregator'), true), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
-        return $this->profileManagement->createProfile([Profile::TYPE => $dataProfile]);
+        return $this->profileManagement->createProfile([]);
     }
     /**
      * @return string


86) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DeleteProfileOrchestrator.php:17    [M] MethodCallRemoval

@@ @@
 {
     public function __construct(ProfileManagementContract $profileManagement)
     {
-        parent::__construct($profileManagement);
+        
     }
     /**
      * @param Request $request


87) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DeleteProfileOrchestrator.php:26    [M] MethodCallRemoval

@@ @@
      */
     public function make(Request $request): bool
     {
-        $this->profileManagement->deleteProfile($request->input('profileId'));
+        
         return true;
     }
     /**


88) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DeleteProfileOrchestrator.php:28    [M] TrueValue

@@ @@
     public function make(Request $request): bool
     {
         $this->profileManagement->deleteProfile($request->input('profileId'));
-        return true;
+        return false;
     }
     /**
      * @return string


89) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:27    [M] MethodCallRemoval

@@ @@
     private Config $config;
     public function __construct(ProfileManagementContract $profileManagement, ModuleManagementContract $moduleManagement, Config $config)
     {
-        parent::__construct($profileManagement);
+        
         $this->moduleManagement = $moduleManagement;
         $this->config = $config;
     }


90) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:42    [M] LogicalNot

@@ @@
     {
         $profileId = $request->input('profileId');
         $profile = null;
-        if (!is_null($profileId)) {
+        if (is_null($profileId)) {
             /** @var Profile $profile */
             $profile = $this->profileManagement->searchProfileById($profileId);
         }


91) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:51    [M] ArrayItemRemoval

@@ @@
         }
         $modules = $this->moduleManagement->searchModules();
         $privileges = $this->retrievePrivilegesProfile($profile, $modules);
-        return ['profileId' => $profileId, 'profile' => $profile, 'modules' => $modules, 'privileges' => $privileges];
+        return ['profile' => $profile, 'modules' => $modules, 'privileges' => $privileges];
     }
     /**
      * @return string


92) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:69    [M] LogicalNot

@@ @@
     }
     private function retrievePrivilegesProfile(?Profile $profile, Modules $modules): array
     {
-        $modulesToProfile = (!is_null($profile)) ? $profile->modulesAggregator() : [];
+        $modulesToProfile = is_null($profile) ? $profile->modulesAggregator() : [];
         $parents = $this->config->get('menu.options');
         $privileges = [];
         foreach ($parents as $index => $item) {


93) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:69    [M] Ternary

@@ @@
     }
     private function retrievePrivilegesProfile(?Profile $profile, Modules $modules): array
     {
-        $modulesToProfile = (!is_null($profile)) ? $profile->modulesAggregator() : [];
+        $modulesToProfile = (!is_null($profile)) ? [] : $profile->modulesAggregator();
         $parents = $this->config->get('menu.options');
         $privileges = [];
         foreach ($parents as $index => $item) {


94) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:73    [M] Foreach_

@@ @@
         $modulesToProfile = (!is_null($profile)) ? $profile->modulesAggregator() : [];
         $parents = $this->config->get('menu.options');
         $privileges = [];
-        foreach ($parents as $index => $item) {
+        foreach ([] as $index => $item) {
             $modulesParent = $modules->moduleElementsOfKey($index);
             if (count($modulesParent) > 0) {
                 $privileges[$index]['menu'] = $item;


95) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:76    [M] GreaterThan

@@ @@
         $privileges = [];
         foreach ($parents as $index => $item) {
             $modulesParent = $modules->moduleElementsOfKey($index);
-            if (count($modulesParent) > 0) {
+            if (count($modulesParent) >= 0) {
                 $privileges[$index]['menu'] = $item;
                 $privileges[$index]['children'] = [];
             }


96) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:76    [M] GreaterThanNegotiation

@@ @@
         $privileges = [];
         foreach ($parents as $index => $item) {
             $modulesParent = $modules->moduleElementsOfKey($index);
-            if (count($modulesParent) > 0) {
+            if (count($modulesParent) <= 0) {
                 $privileges[$index]['menu'] = $item;
                 $privileges[$index]['children'] = [];
             }


97) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:82    [M] Foreach_

@@ @@
                 $privileges[$index]['children'] = [];
             }
             /** @var Module $module */
-            foreach ($modulesParent as $module) {
+            foreach ([] as $module) {
                 if ($module->state()->isActivated()) {
                     $privileges[$index]['children'][] = ['module' => $module, 'selected' => in_array($module->id()->value(), $modulesToProfile)];
                 }


98) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:83    [M] IfNegation

@@ @@
             }
             /** @var Module $module */
             foreach ($modulesParent as $module) {
-                if ($module->state()->isActivated()) {
+                if (!$module->state()->isActivated()) {
                     $privileges[$index]['children'][] = ['module' => $module, 'selected' => in_array($module->id()->value(), $modulesToProfile)];
                 }
             }


99) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:84    [M] ArrayItemRemoval

@@ @@
             /** @var Module $module */
             foreach ($modulesParent as $module) {
                 if ($module->state()->isActivated()) {
-                    $privileges[$index]['children'][] = ['module' => $module, 'selected' => in_array($module->id()->value(), $modulesToProfile)];
+                    $privileges[$index]['children'][] = ['selected' => in_array($module->id()->value(), $modulesToProfile)];
                 }
             }
         }


100) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:86    [M] ArrayItem

@@ @@
             /** @var Module $module */
             foreach ($modulesParent as $module) {
                 if ($module->state()->isActivated()) {
-                    $privileges[$index]['children'][] = ['module' => $module, 'selected' => in_array($module->id()->value(), $modulesToProfile)];
+                    $privileges[$index]['children'][] = ['module' => $module, 'selected' > in_array($module->id()->value(), $modulesToProfile)];
                 }
             }
         }


101) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/DetailProfileOrchestrator.php:92    [M] ArrayOneItem

@@ @@
                 }
             }
         }
-        return $privileges;
+        return (count($privileges) > 1) ? array_slice($privileges, 0, 1, true) : $privileges;
     }
 }


102) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/GetProfileOrchestrator.php:17    [M] MethodCallRemoval

@@ @@
 {
     public function __construct(ProfileManagementContract $profileManagement)
     {
-        parent::__construct($profileManagement);
+        
     }
     /**
      * @param Request $request


103) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/GetProfilesOrchestrator.php:34    [M] MethodCallRemoval

@@ @@
     private ProfileDataTransformerContract $profileDataTransformer;
     public function __construct(ProfileManagementContract $profileManagement, ViewFactory $viewFactory, DataTables $dataTables, ProfileDataTransformerContract $dataTransformer)
     {
-        parent::__construct($profileManagement);
+        
         $this->setViewFactory($viewFactory);
         $this->dataTables = $dataTables;
         $this->profileDataTransformer = $dataTransformer;


104) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/GetProfilesOrchestrator.php:35    [M] MethodCallRemoval

@@ @@
     public function __construct(ProfileManagementContract $profileManagement, ViewFactory $viewFactory, DataTables $dataTables, ProfileDataTransformerContract $dataTransformer)
     {
         parent::__construct($profileManagement);
-        $this->setViewFactory($viewFactory);
+        
         $this->dataTables = $dataTables;
         $this->profileDataTransformer = $dataTransformer;
     }


105) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/GetProfilesOrchestrator.php:52    [M] IfNegation

@@ @@
         $filters = $request->input('filters', []);
         $profiles = $this->profileManagement->searchProfiles($filters);
         $dataProfiles = [];
-        if ($profiles->count()) {
+        if (!$profiles->count()) {
             /** @var Profile $item */
             foreach ($profiles as $item) {
                 $dataProfiles[] = $this->profileDataTransformer->write($item)->readToShare();


106) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/GetProfilesOrchestrator.php:54    [M] Foreach_

@@ @@
         $dataProfiles = [];
         if ($profiles->count()) {
             /** @var Profile $item */
-            foreach ($profiles as $item) {
+            foreach ([] as $item) {
                 $dataProfiles[] = $this->profileDataTransformer->write($item)->readToShare();
             }
         }


107) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/GetProfilesOrchestrator.php:61    [M] MethodCallRemoval

@@ @@
         }
         $collection = new Collection($dataProfiles);
         $datatable = $this->dataTables->collection($collection);
-        $datatable->addColumn('tools', function (array $element) {
-            return $this->retrieveMenuOptionHtml($element);
-        });
+        
         return $datatable->escapeColumns([])->toJson();
     }
     /**


108) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/Profile/UpdateProfileOrchestrator.php:21    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(ProfileManagementContract $profileManagement)
     {
-        parent::__construct($profileManagement);
+        
     }
     /**
      * @param Request $request


109) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/ChangeStateUserOrchestrator.php:18    [M] MethodCallRemoval

@@ @@
 {
     public function __construct(UserManagementContract $userManagement)
     {
-        parent::__construct($userManagement);
+        
     }
     /**
      * @throws Exception


110) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/ChangeStateUserOrchestrator.php:31    [M] MethodCallRemoval

@@ @@
         $userId = $request->input('userId');
         $state = $request->input('state');
         $user = $this->userManagement->searchUserById($userId);
-        $user->state()->setValue($state);
+        
         $dataUpdate['state'] = $state;
         $this->userManagement->updateUser($user->id()->value(), $dataUpdate);
         return $user;


111) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/ChangeStateUserOrchestrator.php:34    [M] MethodCallRemoval

@@ @@
         $user = $this->userManagement->searchUserById($userId);
         $user->state()->setValue($state);
         $dataUpdate['state'] = $state;
-        $this->userManagement->updateUser($user->id()->value(), $dataUpdate);
+        
         return $user;
     }
     /**


112) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:26    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(UserManagementContract $userManagement, Hasher $hasher)
     {
-        parent::__construct($userManagement);
+        
         $this->setHasher($hasher);
     }
     /**


113) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:27    [M] MethodCallRemoval

@@ @@
     public function __construct(UserManagementContract $userManagement, Hasher $hasher)
     {
         parent::__construct($userManagement);
-        $this->setHasher($hasher);
+        
     }
     /**
      * @param Request $request


114) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:36    [M] ArrayItemRemoval

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


115) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:38    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['id' => null, 'employeeId' > $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


116) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:39    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' > $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


117) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:40    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' > $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


118) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:41    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' > $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


119) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:42    [M] Coalesce

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => '' ?? $request->input('image'), 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


120) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:44    [M] ArrayItem

@@ @@
      */
     public function make(Request $request): User
     {
-        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
+        $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' > $this->getCurrentTime()];
         return $this->userManagement->createUser([User::TYPE => $dataUser]);
     }
     /**


121) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/CreateUserOrchestrator.php:47    [M] ArrayItemRemoval

@@ @@
     public function make(Request $request): User
     {
         $dataUser = ['id' => null, 'employeeId' => $request->input('employeeId'), 'profileId' => $request->input('profile'), 'login' => $request->input('login'), 'password' => $this->makeHashPassword($request->input('password')), 'photo' => $request->input('image') ?? '', 'state' => ValueObjectStatus::STATE_NEW, 'createdAt' => $this->getCurrentTime()];
-        return $this->userManagement->createUser([User::TYPE => $dataUser]);
+        return $this->userManagement->createUser([]);
     }
     /**
      * @return string


122) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/DeleteUserOrchestrator.php:16    [M] MethodCallRemoval

@@ @@
 {
     public function __construct(UserManagementContract $userManagement)
     {
-        parent::__construct($userManagement);
+        
     }
     /**
      * @param Request $request


123) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/DeleteUserOrchestrator.php:25    [M] MethodCallRemoval

@@ @@
      */
     public function make(Request $request): bool
     {
-        $this->userManagement->deleteUser($request->input('userId'));
+        
         return true;
     }
     /**


124) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/DeleteUserOrchestrator.php:26    [M] TrueValue

@@ @@
     public function make(Request $request): bool
     {
         $this->userManagement->deleteUser($request->input('userId'));
-        return true;
+        return false;
     }
     /**
      * @return string


125) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/GetUserOrchestrator.php:17    [M] MethodCallRemoval

@@ @@
 {
     public function __construct(UserManagementContract $userManagement)
     {
-        parent::__construct($userManagement);
+        
     }
     /**
      * @param Request $request


126) /var/www/abacusSystem-new/app/Http/Orchestrators/Orchestrator/User/UpdateUserOrchestrator.php:21    [M] MethodCallRemoval

@@ @@
     use UtilsDateTimeTrait;
     public function __construct(UserManagementContract $userManagement)
     {
-        parent::__construct($userManagement);
+        
     }
     /**
      * @param Request $request


127) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:20    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


128) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:22    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


129) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:30    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');


130) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:32    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


131) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:33    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => [], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


132) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:34    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => [], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


133) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:35    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => [], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


134) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:36    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => [], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


135) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:37    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => [], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


136) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:38    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => [], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


137) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:39    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


138) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:40    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => [], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


139) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:41    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
+        $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => []];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {


140) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] GreaterThan

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (is_null($userId) || $userId >= 0 && isset($password)) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


141) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] GreaterThanNegotiation

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (is_null($userId) || $userId <= 0 && isset($password)) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


142) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalAnd

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (is_null($userId) || ($userId > 0 || isset($password))) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


143) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalAndAllSubExprNegation

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (is_null($userId) || !($userId > 0) && !isset($password)) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


144) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalAndNegation

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (is_null($userId) || !($userId > 0 && isset($password))) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


145) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalOr

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (is_null($userId) && ($userId > 0 && isset($password))) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


146) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalOrAllSubExprNegation

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (!is_null($userId) || !($userId > 0 && isset($password))) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


147) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalOrNegation

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (!(is_null($userId) || $userId > 0 && isset($password))) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


148) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:47    [M] LogicalOrSingleSubExprNegation

@@ @@
         $rules = ['employeeId' => ['nullable'], 'userId' => ['nullable'], 'identifier' => ['required'], 'typeDocument' => ['required'], 'name' => ['required'], 'lastname' => ['required'], 'email' => ['required', 'email:rfc'], 'profile' => ['required'], 'login' => ['required']];
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
-        if (is_null($userId) || $userId > 0 && isset($password)) {
+        if (!is_null($userId) || $userId > 0 && isset($password)) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
         return $rules;


149) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:48    [M] ArrayItemRemoval

@@ @@
         $userId = $this->request->get('userId');
         $password = $this->request->get('password');
         if (is_null($userId) || $userId > 0 && isset($password)) {
-            $rules['password'] = ['required', 'confirmed', 'min:7'];
+            $rules['password'] = ['confirmed', 'min:7'];
         }
         return $rules;
     }


150) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:51    [M] ArrayOneItem

@@ @@
         if (is_null($userId) || $userId > 0 && isset($password)) {
             $rules['password'] = ['required', 'confirmed', 'min:7'];
         }
-        return $rules;
+        return (count($rules) > 1) ? array_slice($rules, 0, 1, true) : $rules;
     }
     /**
      * Get the error messages for the defined validation rules.


151) /var/www/abacusSystem-new/app/Http/Requests/Employee/StoreEmployeeRequest.php:61    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return ['identifier.required' => 'El campo identifier es requerido', 'typeDocument.required' => 'El campo typeDocument es requerido', 'name.required' => 'El campo name es requerido', 'lastname.required' => 'El campo lastname es requerido', 'email.required' => 'El campo email es requerido', 'email.email' => 'El campo email debe ser una dirección email valida', 'profile.required' => 'El campo profile es requerido', 'login.required' => 'El campo login es requerido', 'password.required' => 'El campo password es requerido', 'password.confirmed' => 'El campo password debe ser confirmado', 'password.min' => 'El campo password debe ser minimo de 7 caracteres'];
+        return ['typeDocument.required' => 'El campo typeDocument es requerido', 'name.required' => 'El campo name es requerido', 'lastname.required' => 'El campo lastname es requerido', 'email.required' => 'El campo email es requerido', 'email.email' => 'El campo email debe ser una dirección email valida', 'profile.required' => 'El campo profile es requerido', 'login.required' => 'El campo login es requerido', 'password.required' => 'El campo password es requerido', 'password.confirmed' => 'El campo password debe ser confirmado', 'password.min' => 'El campo password debe ser minimo de 7 caracteres'];
     }
 }


152) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:19    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


153) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:21    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


154) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:29    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }


155) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


156) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:32    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => [], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


157) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:33    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => [], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


158) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:34    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => [], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


159) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:35    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => [], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


160) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:36    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => [], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


161) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:37    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => [], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


162) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:38    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


163) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:39    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => [], 'token' => ['nullable']];
     }
     /**
      * Get the error messages for the defined validation rules.


164) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:40    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => ['nullable']];
+        return ['institutionId' => ['nullable'], 'code' => ['nullable'], 'name' => ['required'], 'shortname' => ['required'], 'address' => ['required'], 'phone' => ['required'], 'email' => ['required', 'email:rfc'], 'observations' => ['nullable'], 'token' => []];
     }
     /**
      * Get the error messages for the defined validation rules.


165) /var/www/abacusSystem-new/app/Http/Requests/Institution/StoreInstitutionRequest.php:51    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return ['name.required' => 'El campo name es requerido', 'shortname.required' => 'El campo shortname es requerido', 'email.required' => 'El campo email es requerido', 'email.email' => 'El campo email debe ser una dirección email valida', 'phone.required' => 'El campo phone es requerido'];
+        return ['shortname.required' => 'El campo shortname es requerido', 'email.required' => 'El campo email es requerido', 'email.email' => 'El campo email debe ser una dirección email valida', 'phone.required' => 'El campo phone es requerido'];
     }
 }


166) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:19    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


167) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:21    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


168) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:29    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
     }


169) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
+        return ['route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
     }
     /**
      * Get the error messages for the defined validation rules.


170) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:32    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
+        return ['name' => [], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
     }
     /**
      * Get the error messages for the defined validation rules.


171) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:33    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
+        return ['name' => ['required'], 'route' => [], 'icon' => ['required'], 'key' => ['required']];
     }
     /**
      * Get the error messages for the defined validation rules.


172) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:34    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
+        return ['name' => ['required'], 'route' => ['required'], 'icon' => [], 'key' => ['required']];
     }
     /**
      * Get the error messages for the defined validation rules.


173) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:35    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => ['required']];
+        return ['name' => ['required'], 'route' => ['required'], 'icon' => ['required'], 'key' => []];
     }
     /**
      * Get the error messages for the defined validation rules.


174) /var/www/abacusSystem-new/app/Http/Requests/Module/StoreModuleRequest.php:46    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return ['name.required' => 'El campo nombre es requerido', 'route.required' => 'El campo route es requerido', 'icon.required' => 'El campo icono es requerido', 'key.required' => 'El campo key es requerido'];
+        return ['route.required' => 'El campo route es requerido', 'icon.required' => 'El campo icono es requerido', 'key.required' => 'El campo key es requerido'];
     }
 }


175) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:19    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


176) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:21    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


177) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:29    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
     }


178) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
+        return ['name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
     }
     /**
      * Get the error messages for the defined validation rules.


179) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:32    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
+        return ['id' => ['numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
     }
     /**
      * Get the error messages for the defined validation rules.


180) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:33    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
+        return ['id' => ['nullable', 'numeric'], 'name' => [], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
     }
     /**
      * Get the error messages for the defined validation rules.


181) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:34    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
+        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['array'], 'description' => ['nullable', 'string']];
     }
     /**
      * Get the error messages for the defined validation rules.


182) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:35    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['nullable', 'string']];
+        return ['id' => ['nullable', 'numeric'], 'name' => ['required'], 'modules' => ['required', 'array'], 'description' => ['string']];
     }
     /**
      * Get the error messages for the defined validation rules.


183) /var/www/abacusSystem-new/app/Http/Requests/Profile/StoreProfileRequest.php:46    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return [
-            //'id.required' => 'El campo id es requerido',
-            'id.nullable' => 'El campo id, puede ser null o numerico',
-            'id.numeric' => 'El campo id, puede ser null o numerico',
-            'name.required' => 'El campo nombre es requerido',
-            'modules.required' => 'El campo modules es requerido',
-            'modules.array' => 'El campo modules debe ser un array',
-            'description.string' => 'El campo description pueder ser texto o nulo',
-            'description.nullable' => 'El campo description pueder ser texto o nulo',
-        ];
+        return ['id.numeric' => 'El campo id, puede ser null o numerico', 'name.required' => 'El campo nombre es requerido', 'modules.required' => 'El campo modules es requerido', 'modules.array' => 'El campo modules debe ser un array', 'description.string' => 'El campo description pueder ser texto o nulo', 'description.nullable' => 'El campo description pueder ser texto o nulo'];
     }
 }


184) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:19    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


185) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:21    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


186) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:29    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         return ['login' => ['required', 'max:150'], 'password' => ['required']];
     }


187) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['login' => ['required', 'max:150'], 'password' => ['required']];
+        return ['password' => ['required']];
     }
     /**
      * Get the error messages for the defined validation rules.


188) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:32    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['login' => ['required', 'max:150'], 'password' => ['required']];
+        return ['login' => ['max:150'], 'password' => ['required']];
     }
     /**
      * Get the error messages for the defined validation rules.


189) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:33    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['login' => ['required', 'max:150'], 'password' => ['required']];
+        return ['login' => ['required', 'max:150'], 'password' => []];
     }
     /**
      * Get the error messages for the defined validation rules.


190) /var/www/abacusSystem-new/app/Http/Requests/User/LoginRequest.php:44    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return ['login.required' => 'El campo login es requerido', 'login.max' => 'El campo login debe tener maximo 255 caracteres', 'password.required' => 'El campo password es requerido'];
+        return ['login.max' => 'El campo login debe tener maximo 255 caracteres', 'password.required' => 'El campo password es requerido'];
     }
 }


191) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:19    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


192) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:21    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


193) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:29    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         return ['identification' => ['required', 'string'], 'email' => ['required', 'email:rfc']];
     }


194) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['identification' => ['required', 'string'], 'email' => ['required', 'email:rfc']];
+        return ['email' => ['required', 'email:rfc']];
     }
     /**
      * Get the error messages for the defined validation rules.


195) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:32    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['identification' => ['required', 'string'], 'email' => ['required', 'email:rfc']];
+        return ['identification' => ['string'], 'email' => ['required', 'email:rfc']];
     }
     /**
      * Get the error messages for the defined validation rules.


196) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:33    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['identification' => ['required', 'string'], 'email' => ['required', 'email:rfc']];
+        return ['identification' => ['required', 'string'], 'email' => ['email:rfc']];
     }
     /**
      * Get the error messages for the defined validation rules.


197) /var/www/abacusSystem-new/app/Http/Requests/User/RecoveryAccountRequest.php:44    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return ['identification.required' => 'El campo identification es requerido', 'email.email' => 'El campo email debe ser una dirección valida', 'email.required' => 'El campo email es requerido'];
+        return ['email.email' => 'El campo email debe ser una dirección valida', 'email.required' => 'El campo email es requerido'];
     }
 }


198) /var/www/abacusSystem-new/app/Http/Requests/User/ResetPasswordRequest.php:19    [M] PublicVisibility

@@ @@
     /**
      * Determine if the user is authorized to make this request.
      */
-    public function authorize(): bool
+    protected function authorize(): bool
     {
         return true;
     }


199) /var/www/abacusSystem-new/app/Http/Requests/User/ResetPasswordRequest.php:21    [M] TrueValue

@@ @@
      */
     public function authorize(): bool
     {
-        return true;
+        return false;
     }
     /**
      * Get the validation rules that apply to the request.


200) /var/www/abacusSystem-new/app/Http/Requests/User/ResetPasswordRequest.php:29    [M] PublicVisibility

@@ @@
      *
      * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
      */
-    public function rules(): array
+    protected function rules(): array
     {
         return ['idUser' => 'required', 'password' => 'required|min:7|confirmed', 'password_confirmation' => 'required|min:7'];
     }


201) /var/www/abacusSystem-new/app/Http/Requests/User/ResetPasswordRequest.php:31    [M] ArrayItemRemoval

@@ @@
      */
     public function rules(): array
     {
-        return ['idUser' => 'required', 'password' => 'required|min:7|confirmed', 'password_confirmation' => 'required|min:7'];
+        return ['password' => 'required|min:7|confirmed', 'password_confirmation' => 'required|min:7'];
     }
     /**
      * Get the error messages for the defined validation rules.


202) /var/www/abacusSystem-new/app/Http/Requests/User/ResetPasswordRequest.php:45    [M] ArrayItemRemoval

@@ @@
      */
     public function messages(): array
     {
-        return ['idUser.required' => 'El valor Id es requerido', 'password.required' => 'El campo password es requerido', 'password.min' => 'El campo password debe tener minimo 7 caracteres', 'password.confirmed' => 'El campo password debe ser confirmado'];
+        return ['password.required' => 'El campo password es requerido', 'password.min' => 'El campo password debe tener minimo 7 caracteres', 'password.confirmed' => 'El campo password debe ser confirmado'];
     }
 }


203) /var/www/abacusSystem-new/app/Jobs/ProcessCommandWarmup.php:58    [M] PublicVisibility

@@ @@
     /**
      * Execute the job.
      */
-    public function handle(): void
+    protected function handle(): void
     {
         try {
             Artisan::call($this->command);


204) /var/www/abacusSystem-new/app/Jobs/ProcessCommandWarmup.php:61    [M] MethodCallRemoval

@@ @@
     public function handle(): void
     {
         try {
-            Artisan::call($this->command);
+            
         } catch (Exception $exception) {
             $this->fail($exception);
         }
     }
 }


205) /var/www/abacusSystem-new/app/Jobs/ProcessCommandWarmup.php:63    [M] MethodCallRemoval

@@ @@
         try {
             Artisan::call($this->command);
         } catch (Exception $exception) {
-            $this->fail($exception);
+            
         }
     }
 }


206) /var/www/abacusSystem-new/app/Listeners/EmployeeWarmup.php:24    [M] PublicVisibility

@@ @@
     /**
      * Handle the event.
      */
-    public function handle(EmployeeUpdateOrDeletedEvent $event): void
+    protected function handle(EmployeeUpdateOrDeletedEvent $event): void
     {
         ProcessCommandWarmup::dispatch(sprintf('employee:warmup %d', $event->employeeId()));
     }
 }


207) /var/www/abacusSystem-new/app/Listeners/EmployeeWarmup.php:26    [M] MethodCallRemoval

@@ @@
      */
     public function handle(EmployeeUpdateOrDeletedEvent $event): void
     {
-        ProcessCommandWarmup::dispatch(sprintf('employee:warmup %d', $event->employeeId()));
+        
     }
 }


208) /var/www/abacusSystem-new/app/Listeners/ProfilesWarmup.php:25    [M] PublicVisibility

@@ @@
     /**
      * Handle the event.
      */
-    public function handle(ProfileUpdatedOrDeletedEvent|ModuleUpdatedOrDeletedEvent $event): void
+    protected function handle(ProfileUpdatedOrDeletedEvent|ModuleUpdatedOrDeletedEvent $event): void
     {
         ProcessCommandWarmup::dispatch('profile:warmup');
         ProcessCommandWarmup::dispatch('module:warmup');
     }
 }


209) /var/www/abacusSystem-new/app/Listeners/ProfilesWarmup.php:27    [M] MethodCallRemoval

@@ @@
      */
     public function handle(ProfileUpdatedOrDeletedEvent|ModuleUpdatedOrDeletedEvent $event): void
     {
-        ProcessCommandWarmup::dispatch('profile:warmup');
+        
         ProcessCommandWarmup::dispatch('module:warmup');
     }
 }


210) /var/www/abacusSystem-new/app/Listeners/ProfilesWarmup.php:28    [M] MethodCallRemoval

@@ @@
     public function handle(ProfileUpdatedOrDeletedEvent|ModuleUpdatedOrDeletedEvent $event): void
     {
         ProcessCommandWarmup::dispatch('profile:warmup');
-        ProcessCommandWarmup::dispatch('module:warmup');
+        
     }
 }


211) /var/www/abacusSystem-new/app/Listeners/UserRefreshSession.php:29    [M] PublicVisibility

@@ @@
     /**
      * Handle the event.
      */
-    public function handle(RefreshModulesSessionEvent $event): void
+    protected function handle(RefreshModulesSessionEvent $event): void
     {
         /** @var Profile $profileSession */
         $profileSession = $this->session->get('profile');


212) /var/www/abacusSystem-new/app/Listeners/UserRefreshSession.php:35    [M] MethodCallRemoval

@@ @@
         /** @var Profile $profileSession */
         $profileSession = $this->session->get('profile');
         $profile = $this->profileService->searchProfileById($profileSession->id()->value());
-        $this->session->forget('profile');
+        
         $this->session->put('profile', $profile);
     }
 }


213) /var/www/abacusSystem-new/app/Listeners/UserRefreshSession.php:36    [M] MethodCallRemoval

@@ @@
         $profileSession = $this->session->get('profile');
         $profile = $this->profileService->searchProfileById($profileSession->id()->value());
         $this->session->forget('profile');
-        $this->session->put('profile', $profile);
+        
     }
 }


214) /var/www/abacusSystem-new/app/Listeners/UserWarmup.php:24    [M] PublicVisibility

@@ @@
     /**
      * Handle the event.
      */
-    public function handle(UserUpdateOrDeleteEvent $event): void
+    protected function handle(UserUpdateOrDeleteEvent $event): void
     {
         ProcessCommandWarmup::dispatch(sprintf('user:warmup %d', $event->userId()));
     }
 }


215) /var/www/abacusSystem-new/app/Listeners/UserWarmup.php:26    [M] MethodCallRemoval

@@ @@
      */
     public function handle(UserUpdateOrDeleteEvent $event): void
     {
-        ProcessCommandWarmup::dispatch(sprintf('user:warmup %d', $event->userId()));
+        
     }
 }


216) /var/www/abacusSystem-new/app/Providers/AppServiceProvider.php:31    [M] NewObject

@@ @@
     public function register(): void
     {
         $this->app->singletonIf(ImageManagerInterface::class, function (Application $app) {
-            return new ImageManager($app->make(Driver::class));
+            new ImageManager($app->make(Driver::class));
+            return null;
         });
         $this->app->singletonIf(StatefulGuard::class, function (Application $app) {
             $authManager = $app->make(AuthManager::class);


217) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:27    [M] MethodCallRemoval

@@ @@
     {
         $this->app->singletonIf(ActionExecutorHandler::class, function (Application $app) {
             $actionExecutorHandler = new ActionExecutorHandler();
-            $actionExecutorHandler->addActionExecutor($app->make(CreateProfileActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(UpdateProfileActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));


218) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:31    [M] MethodCallRemoval

@@ @@
         $this->app->singletonIf(ActionExecutorHandler::class, function (Application $app) {
             $actionExecutorHandler = new ActionExecutorHandler();
             $actionExecutorHandler->addActionExecutor($app->make(CreateProfileActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateProfileActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));


219) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:35    [M] MethodCallRemoval

@@ @@
             $actionExecutorHandler = new ActionExecutorHandler();
             $actionExecutorHandler->addActionExecutor($app->make(CreateProfileActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateProfileActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));


220) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:39    [M] MethodCallRemoval

@@ @@
             $actionExecutorHandler->addActionExecutor($app->make(CreateProfileActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateProfileActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateEmployeeActionExecutor::class));


221) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:43    [M] MethodCallRemoval

@@ @@
             $actionExecutorHandler->addActionExecutor($app->make(UpdateProfileActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateEmployeeActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateEmployeeActionExecutor::class));


222) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:47    [M] MethodCallRemoval

@@ @@
             $actionExecutorHandler->addActionExecutor($app->make(CreateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(CreateEmployeeActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateEmployeeActionExecutor::class));
             return $actionExecutorHandler;


223) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:51    [M] MethodCallRemoval

@@ @@
             $actionExecutorHandler->addActionExecutor($app->make(UpdateModuleActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(CreateEmployeeActionExecutor::class));
+            
             $actionExecutorHandler->addActionExecutor($app->make(UpdateEmployeeActionExecutor::class));
             return $actionExecutorHandler;
         });


224) /var/www/abacusSystem-new/app/Providers/Service/ControllerServiceProvider.php:55    [M] MethodCallRemoval

@@ @@
             $actionExecutorHandler->addActionExecutor($app->make(CreateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(UpdateInstitutionActionExecutor::class));
             $actionExecutorHandler->addActionExecutor($app->make(CreateEmployeeActionExecutor::class));
-            $actionExecutorHandler->addActionExecutor($app->make(UpdateEmployeeActionExecutor::class));
+            
             return $actionExecutorHandler;
         });
     }


225) /var/www/abacusSystem-new/app/Providers/Service/EmployeeServiceProvider.php:40    [M] MethodCallRemoval

@@ @@
     {
         $this->app->singletonIf(EmployeeRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainEmployeeRepository();
-            $chainRepository->addRepository($app->make(RedisEmployeeRepository::class))->addRepository($app->make(EloquentEmployeeRepository::class));
+            
             return $chainRepository;
         });
         //Commands


226) /var/www/abacusSystem-new/app/Providers/Service/EmployeeServiceProvider.php:52    [M] NewObject

@@ @@
         });
         //Commands
         $this->app->singletonIf(EmployeeWarmup::class, function (Application $app) {
-            return new EmployeeWarmup($app->make(LoggerInterface::class), $app->make(EmployeeFactoryContract::class), $app->make(EloquentEmployeeRepository::class), $app->make(RedisEmployeeRepository::class));
+            new EmployeeWarmup($app->make(LoggerInterface::class), $app->make(EmployeeFactoryContract::class), $app->make(EloquentEmployeeRepository::class), $app->make(RedisEmployeeRepository::class));
+            return null;
         });
     }
     /**


227) /var/www/abacusSystem-new/app/Providers/Service/EmployeeServiceProvider.php:68    [M] ArrayItemRemoval

@@ @@
      */
     public function provides(): array
     {
-        return [EmployeeFactoryContract::class, EmployeeManagementContract::class, EmployeeDataTransformerContract::class];
+        return [EmployeeManagementContract::class, EmployeeDataTransformerContract::class];
     }
     /**
      * Bootstrap services.


228) /var/www/abacusSystem-new/app/Providers/Service/InstitutionServiceProvider.php:39    [M] MethodCallRemoval

@@ @@
     {
         $this->app->singletonIf(InstitutionRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainInstitutionRepository();
-            $chainRepository->addRepository($app->make(RedisInstitutionRepository::class));
+            
             $chainRepository->addRepository($app->make(EloquentInstitutionRepository::class));
             return $chainRepository;
         });


229) /var/www/abacusSystem-new/app/Providers/Service/InstitutionServiceProvider.php:43    [M] MethodCallRemoval

@@ @@
         $this->app->singletonIf(InstitutionRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainInstitutionRepository();
             $chainRepository->addRepository($app->make(RedisInstitutionRepository::class));
-            $chainRepository->addRepository($app->make(EloquentInstitutionRepository::class));
+            
             return $chainRepository;
         });
         //Commands


230) /var/www/abacusSystem-new/app/Providers/Service/InstitutionServiceProvider.php:52    [M] NewObject

@@ @@
         });
         //Commands
         $this->app->singletonIf(InstitutionWarmup::class, function (Application $app) {
-            return new InstitutionWarmup($app->make(LoggerInterface::class), $app->make(InstitutionFactoryContract::class), $app->make(EloquentInstitutionRepository::class), $app->make(RedisInstitutionRepository::class));
+            new InstitutionWarmup($app->make(LoggerInterface::class), $app->make(InstitutionFactoryContract::class), $app->make(EloquentInstitutionRepository::class), $app->make(RedisInstitutionRepository::class));
+            return null;
         });
     }
     /**


231) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:52    [M] MethodCallRemoval

@@ @@
     {
         $this->app->singletonIf(OrchestratorHandlerContract::class, function (Application $app) {
             $orchestratorHandler = new OrchestratorHandler();
-            //Employee Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(CreateEmployeeOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));


232) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:56    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler = new OrchestratorHandler();
             //Employee Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(CreateEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateEmployeeOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));


233) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:60    [M] MethodCallRemoval

@@ @@
             //Employee Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(CreateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));


234) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:64    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(CreateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));


235) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:68    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));
             //User Orchestrators


236) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:72    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));
             //User Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));


237) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:76    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(GetEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));
+            
             //User Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));


238) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:81    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DetailEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateEmployeeOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));
-            //User Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));


239) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:85    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DeleteEmployeeOrchestrator::class));
             //User Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));


240) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:89    [M] MethodCallRemoval

@@ @@
             //User Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));
             //Profile Orchestrators


241) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:93    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));
             //Profile Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));


242) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:97    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(GetUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));
+            
             //Profile Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));


243) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:102    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(CreateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateUserOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));
-            //Profile Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));


244) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:106    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DeleteUserOrchestrator::class));
             //Profile Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));


245) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:110    [M] MethodCallRemoval

@@ @@
             //Profile Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));


246) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:114    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(GetProfilesOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));


247) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:118    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(GetProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));
             //Institution Orchestrators


248) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:122    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));
             //Institution Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));


249) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:126    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DeleteProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));
+            
             //Institution Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));


250) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:131    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DetailProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateProfileOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));
-            //Institution Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));


251) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:135    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(UpdateProfileOrchestrator::class));
             //Institution Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));


252) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:139    [M] MethodCallRemoval

@@ @@
             //Institution Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));


253) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:143    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));
             //Module Orchestrators


254) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:147    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(GetInstitutionsOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));
             //Module Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));


255) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:151    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DetailInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));
+            
             //Module Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));


256) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:156    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(CreateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateInstitutionOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));
-            //Module Orchestrators
-            $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));


257) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:160    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DeleteInstitutionOrchestrator::class));
             //Module Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteModuleOrchestrator::class));


258) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:164    [M] MethodCallRemoval

@@ @@
             //Module Orchestrators
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetModulesOrchestrator::class));


259) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:168    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(ChangeStateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(DeleteModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(GetModulesOrchestrator::class));
             return $orchestratorHandler;


260) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:172    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(DetailModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(DeleteModuleOrchestrator::class));
+            
             $orchestratorHandler->addOrchestrator($app->make(GetModulesOrchestrator::class));
             return $orchestratorHandler;
         });


261) /var/www/abacusSystem-new/app/Providers/Service/OrchestratorServiceProvider.php:176    [M] MethodCallRemoval

@@ @@
             $orchestratorHandler->addOrchestrator($app->make(CreateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(UpdateModuleOrchestrator::class));
             $orchestratorHandler->addOrchestrator($app->make(DeleteModuleOrchestrator::class));
-            $orchestratorHandler->addOrchestrator($app->make(GetModulesOrchestrator::class));
+            
             return $orchestratorHandler;
         });
     }


262) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:56    [M] MethodCallRemoval

@@ @@
     {
         $this->app->singletonIf(ProfileRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainProfileRepository();
-            $chainRepository->addRepository($app->make(RedisProfileRepository::class))->addRepository($app->make(EloquentProfileRepository::class));
+            
             return $chainRepository;
         });
         $this->app->singletonIf(ModuleRepositoryContract::class, function (Application $app) {


263) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:69    [M] MethodCallRemoval

@@ @@
         });
         $this->app->singletonIf(ModuleRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainModuleRepository();
-            $chainRepository->addRepository($app->make(RedisModuleRepository::class))->addRepository($app->make(EloquentModuleRepository::class));
+            
             return $chainRepository;
         });
         //Commands


264) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:81    [M] NewObject

@@ @@
         });
         //Commands
         $this->app->singletonIf(ProfileWarmup::class, function (Application $app) {
-            return new ProfileWarmup($app->make(LoggerInterface::class), $app->make(ProfileFactoryContract::class), $app->make(EloquentProfileRepository::class), $app->make(RedisProfileRepository::class));
+            new ProfileWarmup($app->make(LoggerInterface::class), $app->make(ProfileFactoryContract::class), $app->make(EloquentProfileRepository::class), $app->make(RedisProfileRepository::class));
+            return null;
         });
         $this->app->singletonIf(ModuleWarmup::class, function (Application $app) {
             return new ModuleWarmup($app->make(LoggerInterface::class), $app->make(ModuleFactoryContract::class), $app->make(EloquentModuleRepository::class), $app->make(RedisModuleRepository::class));


265) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:90    [M] NewObject

@@ @@
             return new ProfileWarmup($app->make(LoggerInterface::class), $app->make(ProfileFactoryContract::class), $app->make(EloquentProfileRepository::class), $app->make(RedisProfileRepository::class));
         });
         $this->app->singletonIf(ModuleWarmup::class, function (Application $app) {
-            return new ModuleWarmup($app->make(LoggerInterface::class), $app->make(ModuleFactoryContract::class), $app->make(EloquentModuleRepository::class), $app->make(RedisModuleRepository::class));
+            new ModuleWarmup($app->make(LoggerInterface::class), $app->make(ModuleFactoryContract::class), $app->make(EloquentModuleRepository::class), $app->make(RedisModuleRepository::class));
+            return null;
         });
     }
     /**


266) /var/www/abacusSystem-new/app/Providers/Service/ProfileServiceProvider.php:106    [M] ArrayItemRemoval

@@ @@
      */
     public function provides(): array
     {
-        return [ProfileFactoryContract::class, ProfileDataTransformerContract::class, ProfileManagementContract::class, ModuleFactoryContract::class, ModuleDataTransformerContract::class, ModuleManagementContract::class];
+        return [ProfileDataTransformerContract::class, ProfileManagementContract::class, ModuleFactoryContract::class, ModuleDataTransformerContract::class, ModuleManagementContract::class];
     }
     /**
      * Bootstrap services.


267) /var/www/abacusSystem-new/app/Providers/Service/UserServiceProvider.php:40    [M] MethodCallRemoval

@@ @@
     {
         $this->app->singletonIf(UserRepositoryContract::class, function (Application $app) {
             $chainRepository = new ChainUserRepository();
-            $chainRepository->addRepository($app->make(RedisUserRepository::class))->addRepository($app->make(EloquentUserRepository::class));
+            
             return $chainRepository;
         });
         //Commands


268) /var/www/abacusSystem-new/app/Providers/Service/UserServiceProvider.php:52    [M] NewObject

@@ @@
         });
         //Commands
         $this->app->singletonIf(UserWarmup::class, function (Application $app) {
-            return new UserWarmup($app->make(LoggerInterface::class), $app->make(UserFactoryContract::class), $app->make(EloquentUserRepository::class), $app->make(RedisUserRepository::class));
+            new UserWarmup($app->make(LoggerInterface::class), $app->make(UserFactoryContract::class), $app->make(EloquentUserRepository::class), $app->make(RedisUserRepository::class));
+            return null;
         });
     }
     /**


269) /var/www/abacusSystem-new/app/Providers/Service/UserServiceProvider.php:68    [M] ArrayItemRemoval

@@ @@
      */
     public function provides(): array
     {
-        return [UserFactoryContract::class, UserManagementContract::class, UserDataTransformerContract::class];
+        return [UserManagementContract::class, UserDataTransformerContract::class];
     }
     /**
      * Bootstrap services.


270) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:45    [M] NotIdentical

@@ @@
             /** @var Request $requestService */
             $requestService = $this->app->make(Request::class);
             $isAjax = $requestService->ajax();
-            if ($this->session->get('user') !== null && !$isAjax) {
+            if ($this->session->get('user') === null && !$isAjax) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';


271) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:45    [M] LogicalNot

@@ @@
             /** @var Request $requestService */
             $requestService = $this->app->make(Request::class);
             $isAjax = $requestService->ajax();
-            if ($this->session->get('user') !== null && !$isAjax) {
+            if ($this->session->get('user') !== null && $isAjax) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';


272) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:45    [M] LogicalAnd

@@ @@
             /** @var Request $requestService */
             $requestService = $this->app->make(Request::class);
             $isAjax = $requestService->ajax();
-            if ($this->session->get('user') !== null && !$isAjax) {
+            if ($this->session->get('user') !== null || !$isAjax) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';


273) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:45    [M] LogicalAndAllSubExprNegation

@@ @@
             /** @var Request $requestService */
             $requestService = $this->app->make(Request::class);
             $isAjax = $requestService->ajax();
-            if ($this->session->get('user') !== null && !$isAjax) {
+            if (!($this->session->get('user') !== null) && $isAjax) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';


274) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:45    [M] LogicalAndNegation

@@ @@
             /** @var Request $requestService */
             $requestService = $this->app->make(Request::class);
             $isAjax = $requestService->ajax();
-            if ($this->session->get('user') !== null && !$isAjax) {
+            if (!($this->session->get('user') !== null && !$isAjax)) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';


275) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:46    [M] MethodCallRemoval

@@ @@
             $requestService = $this->app->make(Request::class);
             $isAjax = $requestService->ajax();
             if ($this->session->get('user') !== null && !$isAjax) {
-                View::composer('layouts.menu', MenuComposer::class);
+                
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';
             $view->with('layout', $baseHome);


276) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:49    [M] LogicalNot

@@ @@
             if ($this->session->get('user') !== null && !$isAjax) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
-            $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';
+            $baseHome = $isAjax ? 'layouts.home' : 'layouts.home-ajax';
             $view->with('layout', $baseHome);
         });
     }
 }


277) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:49    [M] Ternary

@@ @@
             if ($this->session->get('user') !== null && !$isAjax) {
                 View::composer('layouts.menu', MenuComposer::class);
             }
-            $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';
+            $baseHome = (!$isAjax) ? 'layouts.home-ajax' : 'layouts.home';
             $view->with('layout', $baseHome);
         });
     }
 }


278) /var/www/abacusSystem-new/app/Providers/ViewServiceProvider.php:50    [M] MethodCallRemoval

@@ @@
                 View::composer('layouts.menu', MenuComposer::class);
             }
             $baseHome = (!$isAjax) ? 'layouts.home' : 'layouts.home-ajax';
-            $view->with('layout', $baseHome);
+            
         });
     }
 }


279) /var/www/abacusSystem-new/app/View/Composers/HomeComposer.php:10    [M] PublicVisibility

@@ @@
 use Illuminate\View\View;
 class HomeComposer
 {
-    public function compose(View $view): void
+    protected function compose(View $view): void
     {
         $random = Str::random(10);
         $view->with('versionRandom', $random);
     }
 }


280) /var/www/abacusSystem-new/app/View/Composers/HomeComposer.php:12    [M] DecrementInteger

@@ @@
 {
     public function compose(View $view): void
     {
-        $random = Str::random(10);
+        $random = Str::random(9);
         $view->with('versionRandom', $random);
     }
 }


281) /var/www/abacusSystem-new/app/View/Composers/HomeComposer.php:12    [M] IncrementInteger

@@ @@
 {
     public function compose(View $view): void
     {
-        $random = Str::random(10);
+        $random = Str::random(11);
         $view->with('versionRandom', $random);
     }
 }


282) /var/www/abacusSystem-new/app/View/Composers/HomeComposer.php:13    [M] MethodCallRemoval

@@ @@
     public function compose(View $view): void
     {
         $random = Str::random(10);
-        $view->with('versionRandom', $random);
+        
     }
 }


283) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:38    [M] PublicVisibility

@@ @@
         $this->session = $session;
         $this->imagePathFull = '/images/full/';
     }
-    public function compose(View $view): void
+    protected function compose(View $view): void
     {
         /** @var User $user */
         $user = $this->session->get('user');


284) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] Concat

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($user->photo()->value() . $this->imagePathFull . '?v=' . Str::random(10));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


285) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] ConcatOperandRemoval

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($user->photo()->value() . '?v=' . Str::random(10));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


286) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] ConcatOperandRemoval

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . '?v=' . Str::random(10));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


287) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] Concat

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . '?v=' . $user->photo()->value() . Str::random(10));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


288) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] ConcatOperandRemoval

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . $user->photo()->value() . Str::random(10));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


289) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] DecrementInteger

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(9));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


290) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] IncrementInteger

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(11));
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


291) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] Concat

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . $user->photo()->value() . Str::random(10) . '?v=');
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


292) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:49    [M] ConcatOperandRemoval

@@ @@
         /** @var Employee $employee */
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
-        $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
+        $image = url($this->imagePathFull . $user->photo()->value() . '?v=');
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);


293) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:51    [M] MethodCallRemoval

@@ @@
         $employee = $this->session->get('employee');
         $menu = $this->prepareMenu($profile->modules());
         $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
-        $view->with('menu', $menu);
+        
         $view->with('user', $user);
         $view->with('employee', $employee);
         $view->with('profile', $profile);


294) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:52    [M] MethodCallRemoval

@@ @@
         $menu = $this->prepareMenu($profile->modules());
         $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
         $view->with('menu', $menu);
-        $view->with('user', $user);
+        
         $view->with('employee', $employee);
         $view->with('profile', $profile);
         $view->with('image', $image);


295) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:53    [M] MethodCallRemoval

@@ @@
         $image = url($this->imagePathFull . $user->photo()->value() . '?v=' . Str::random(10));
         $view->with('menu', $menu);
         $view->with('user', $user);
-        $view->with('employee', $employee);
+        
         $view->with('profile', $profile);
         $view->with('image', $image);
     }


296) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:54    [M] MethodCallRemoval

@@ @@
         $view->with('menu', $menu);
         $view->with('user', $user);
         $view->with('employee', $employee);
-        $view->with('profile', $profile);
+        
         $view->with('image', $image);
     }
     private function prepareMenu(Modules $modules): array


297) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:55    [M] MethodCallRemoval

@@ @@
         $view->with('user', $user);
         $view->with('employee', $employee);
         $view->with('profile', $profile);
-        $view->with('image', $image);
+        
     }
     private function prepareMenu(Modules $modules): array
     {


298) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:62    [M] Foreach_

@@ @@
     {
         $menuWithChildren = [];
         $menuUnique = [];
-        foreach ($this->config->get('menu.options') as $index => $item) {
+        foreach ([] as $index => $item) {
             $item['id'] = 0;
             if (is_null($item['route'])) {
                 $options = $modules->moduleElementsOfKey($index);


299) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:63    [M] DecrementInteger

@@ @@
         $menuWithChildren = [];
         $menuUnique = [];
         foreach ($this->config->get('menu.options') as $index => $item) {
-            $item['id'] = 0;
+            $item['id'] = -1;
             if (is_null($item['route'])) {
                 $options = $modules->moduleElementsOfKey($index);
                 if (count($options)) {


300) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:65    [M] IfNegation

@@ @@
         $menuUnique = [];
         foreach ($this->config->get('menu.options') as $index => $item) {
             $item['id'] = 0;
-            if (is_null($item['route'])) {
+            if (!is_null($item['route'])) {
                 $options = $modules->moduleElementsOfKey($index);
                 if (count($options)) {
                     $item['key'] = $index;


301) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:68    [M] IfNegation

@@ @@
             $item['id'] = 0;
             if (is_null($item['route'])) {
                 $options = $modules->moduleElementsOfKey($index);
-                if (count($options)) {
+                if (!count($options)) {
                     $item['key'] = $index;
                     $item['route'] = '';
                     $mainModule = $this->changeExpandedToModule($options, $this->getModuleMenu($item));


302) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:82    [M] UnwrapArrayMerge

@@ @@
                 $menuUnique[] = $this->getModuleMenu($item);
             }
         }
-        return array_merge($menuWithChildren, $menuUnique);
+        return $menuWithChildren;
     }
     private function getModuleMenu(array $data): Module
     {


303) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:82    [M] UnwrapArrayMerge

@@ @@
                 $menuUnique[] = $this->getModuleMenu($item);
             }
         }
-        return array_merge($menuWithChildren, $menuUnique);
+        return $menuUnique;
     }
     private function getModuleMenu(array $data): Module
     {


304) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:103    [M] Foreach_

@@ @@
     private function changeExpandedToModule(array $modules, Module $mainModule): Module
     {
         $routeCurrent = $this->router->current()->uri();
-        foreach ($modules as $item) {
+        foreach ([] as $item) {
             if ($item->route()->value() === $routeCurrent) {
                 $item->setExpanded(true);
                 $mainModule->setExpanded(true);


305) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:104    [M] Identical

@@ @@
     {
         $routeCurrent = $this->router->current()->uri();
         foreach ($modules as $item) {
-            if ($item->route()->value() === $routeCurrent) {
+            if ($item->route()->value() !== $routeCurrent) {
                 $item->setExpanded(true);
                 $mainModule->setExpanded(true);
             }


306) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:105    [M] TrueValue

@@ @@
         $routeCurrent = $this->router->current()->uri();
         foreach ($modules as $item) {
             if ($item->route()->value() === $routeCurrent) {
-                $item->setExpanded(true);
+                $item->setExpanded(false);
                 $mainModule->setExpanded(true);
             }
         }


307) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:105    [M] MethodCallRemoval

@@ @@
         $routeCurrent = $this->router->current()->uri();
         foreach ($modules as $item) {
             if ($item->route()->value() === $routeCurrent) {
-                $item->setExpanded(true);
+                
                 $mainModule->setExpanded(true);
             }
         }


308) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:106    [M] TrueValue

@@ @@
         foreach ($modules as $item) {
             if ($item->route()->value() === $routeCurrent) {
                 $item->setExpanded(true);
-                $mainModule->setExpanded(true);
+                $mainModule->setExpanded(false);
             }
         }
         $mainModule->setOptions($modules);


309) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:106    [M] MethodCallRemoval

@@ @@
         foreach ($modules as $item) {
             if ($item->route()->value() === $routeCurrent) {
                 $item->setExpanded(true);
-                $mainModule->setExpanded(true);
+                
             }
         }
         $mainModule->setOptions($modules);


310) /var/www/abacusSystem-new/app/View/Composers/MenuComposer.php:109    [M] MethodCallRemoval

@@ @@
                 $mainModule->setExpanded(true);
             }
         }
-        $mainModule->setOptions($modules);
+        
         return $mainModule;
     }
 }


311) /var/www/abacusSystem-new/src/core/Employee/Application/UseCases/UseCasesService.php:24    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Exception
      */
-    protected function validateRequest(RequestService $request, string $requestClass): RequestService
+    private function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
             throw new Exception('Request not valid');


312) /var/www/abacusSystem-new/src/core/Employee/Application/UseCases/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!true) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


313) /var/www/abacusSystem-new/src/core/Employee/Application/UseCases/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!false) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


314) /var/www/abacusSystem-new/src/core/Employee/Application/UseCases/UseCasesService.php:26    [M] LogicalNot

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if ($request instanceof $requestClass) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


315) /var/www/abacusSystem-new/src/core/Employee/Application/UseCases/UseCasesService.php:27    [M] Throw_

@@ @@
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
-            throw new Exception('Request not valid');
+            new Exception('Request not valid');
         }
         return $request;
     }
 }


316) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:44    [M] Concat

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by id ' . $id->value());
+            throw new EmployeeNotFoundException($id->value() . 'Employee not found by id ');
         }
     }
     /**


317) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:44    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by id ' . $id->value());
+            throw new EmployeeNotFoundException($id->value());
         }
     }
     /**


318) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:44    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by id ' . $id->value());
+            throw new EmployeeNotFoundException('Employee not found by id ');
         }
     }
     /**


319) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:44    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by id ' . $id->value());
+            new EmployeeNotFoundException('Employee not found by id ' . $id->value());
         }
     }
     /**


320) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:59    [M] Concat

@@ @@
         try {
             return $this->read(__FUNCTION__, $identification);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by identification ' . $identification->value());
+            throw new EmployeeNotFoundException($identification->value() . 'Employee not found by identification ');
         }
     }
     /**


321) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:59    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $identification);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by identification ' . $identification->value());
+            throw new EmployeeNotFoundException($identification->value());
         }
     }
     /**


322) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:59    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $identification);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by identification ' . $identification->value());
+            throw new EmployeeNotFoundException('Employee not found by identification ');
         }
     }
     /**


323) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:59    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $identification);
         } catch (Exception $exception) {
-            throw new EmployeeNotFoundException('Employee not found by identification ' . $identification->value());
+            new EmployeeNotFoundException('Employee not found by identification ' . $identification->value());
         }
     }
     /**


324) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:68    [M] MethodCallRemoval

@@ @@
      */
     public function delete(EmployeeId $id): void
     {
-        $this->write(__FUNCTION__, $id);
+        
     }
     public function persistEmployee(Employee $employee): Employee
     {


325) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:76    [M] PublicVisibility

@@ @@
     {
         return $this->write(__FUNCTION__, $employee);
     }
-    public function persistEmployees(Employees $employees): Employees
+    protected function persistEmployees(Employees $employees): Employees
     {
         return $this->write(__FUNCTION__, $employees);
     }


326) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:92    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $filters);
         } catch (Exception $exception) {
-            throw new EmployeesNotFoundException('Employees not found');
+            new EmployeesNotFoundException('Employees not found');
         }
     }
     public function functionNameDelete(): bool


327) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:96    [M] PublicVisibility

@@ @@
             throw new EmployeesNotFoundException('Employees not found');
         }
     }
-    public function functionNameDelete(): bool
+    protected function functionNameDelete(): bool
     {
         return false;
     }
 }


328) /var/www/abacusSystem-new/src/core/Employee/Infrastructure/Persistence/Repositories/ChainEmployeeRepository.php:98    [M] FalseValue

@@ @@
     }
     public function functionNameDelete(): bool
     {
-        return false;
+        return true;
     }
 }


329) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/UseCasesService.php:24    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Exception
      */
-    protected function validateRequest(RequestService $request, string $requestClass): RequestService
+    private function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
             throw new Exception('Request not valid');


330) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!true) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


331) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!false) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


332) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/UseCasesService.php:26    [M] LogicalNot

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if ($request instanceof $requestClass) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


333) /var/www/abacusSystem-new/src/core/Institution/Application/UseCases/UseCasesService.php:27    [M] Throw_

@@ @@
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
-            throw new Exception('Request not valid');
+            new Exception('Request not valid');
         }
         return $request;
     }
 }


334) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:46    [M] Concat

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new InstitutionNotFoundException('Institution not found by id ' . $id->value());
+            throw new InstitutionNotFoundException($id->value() . 'Institution not found by id ');
         }
     }
     /**


335) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:46    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new InstitutionNotFoundException('Institution not found by id ' . $id->value());
+            throw new InstitutionNotFoundException($id->value());
         }
     }
     /**


336) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:46    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new InstitutionNotFoundException('Institution not found by id ' . $id->value());
+            throw new InstitutionNotFoundException('Institution not found by id ');
         }
     }
     /**


337) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:46    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new InstitutionNotFoundException('Institution not found by id ' . $id->value());
+            new InstitutionNotFoundException('Institution not found by id ' . $id->value());
         }
     }
     /**


338) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:60    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $filters);
         } catch (Exception $exception) {
-            throw new InstitutionsNotFoundException('Institutions not found');
+            new InstitutionsNotFoundException('Institutions not found');
         }
     }
     public function delete(InstitutionId $id): void


339) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:66    [M] MethodCallRemoval

@@ @@
     }
     public function delete(InstitutionId $id): void
     {
-        $this->write(__FUNCTION__, $id);
+        
     }
     public function persistInstitution(Institution $institution): Institution
     {


340) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:74    [M] PublicVisibility

@@ @@
     {
         return $this->write(__FUNCTION__, $institution);
     }
-    public function functionNameDelete(): bool
+    protected function functionNameDelete(): bool
     {
         return false;
     }
 }


341) /var/www/abacusSystem-new/src/core/Institution/Infrastructure/Persistence/Repositories/ChainInstitutionRepository.php:76    [M] FalseValue

@@ @@
     }
     public function functionNameDelete(): bool
     {
-        return false;
+        return true;
     }
 }


342) /var/www/abacusSystem-new/src/core/Profile/Application/UseCases/UseCasesService.php:24    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Exception
      */
-    protected function validateRequest(RequestService $request, string $requestClass): RequestService
+    private function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
             throw new Exception('Request not valid');


343) /var/www/abacusSystem-new/src/core/Profile/Application/UseCases/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!true) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


344) /var/www/abacusSystem-new/src/core/Profile/Application/UseCases/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!false) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


345) /var/www/abacusSystem-new/src/core/Profile/Application/UseCases/UseCasesService.php:26    [M] LogicalNot

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if ($request instanceof $requestClass) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


346) /var/www/abacusSystem-new/src/core/Profile/Application/UseCases/UseCasesService.php:27    [M] Throw_

@@ @@
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
-            throw new Exception('Request not valid');
+            new Exception('Request not valid');
         }
         return $request;
     }
 }


347) /var/www/abacusSystem-new/src/core/Profile/Application/UseCasesModule/UseCasesService.php:24    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Exception
      */
-    protected function validateRequest(RequestService $request, string $requestClass): RequestService
+    private function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
             throw new Exception('Request not valid');


348) /var/www/abacusSystem-new/src/core/Profile/Application/UseCasesModule/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!true) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


349) /var/www/abacusSystem-new/src/core/Profile/Application/UseCasesModule/UseCasesService.php:26    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!false) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


350) /var/www/abacusSystem-new/src/core/Profile/Application/UseCasesModule/UseCasesService.php:26    [M] LogicalNot

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if ($request instanceof $requestClass) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


351) /var/www/abacusSystem-new/src/core/Profile/Application/UseCasesModule/UseCasesService.php:27    [M] Throw_

@@ @@
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
-            throw new Exception('Request not valid');
+            new Exception('Request not valid');
         }
         return $request;
     }
 }


352) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:38    [M] Concat

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new ModuleNotFoundException('Module not found by id ' . $id->value());
+            throw new ModuleNotFoundException($id->value() . 'Module not found by id ');
         }
     }
     public function persistModule(Module $module): Module


353) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:38    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new ModuleNotFoundException('Module not found by id ' . $id->value());
+            throw new ModuleNotFoundException($id->value());
         }
     }
     public function persistModule(Module $module): Module


354) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:38    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new ModuleNotFoundException('Module not found by id ' . $id->value());
+            throw new ModuleNotFoundException('Module not found by id ');
         }
     }
     public function persistModule(Module $module): Module


355) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:38    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new ModuleNotFoundException('Module not found by id ' . $id->value());
+            new ModuleNotFoundException('Module not found by id ' . $id->value());
         }
     }
     public function persistModule(Module $module): Module


356) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:63    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $filters);
         } catch (Exception $exception) {
-            throw new ModulesNotFoundException('Modules no found');
+            new ModulesNotFoundException('Modules no found');
         }
     }
     /**


357) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:72    [M] MethodCallRemoval

@@ @@
      */
     public function deleteModule(ModuleId $id): void
     {
-        $this->write(__FUNCTION__, $id);
+        
     }
     public function functionNameDelete(): bool
     {


358) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:75    [M] PublicVisibility

@@ @@
     {
         $this->write(__FUNCTION__, $id);
     }
-    public function functionNameDelete(): bool
+    protected function functionNameDelete(): bool
     {
         return false;
     }
 }


359) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainModuleRepository.php:77    [M] FalseValue

@@ @@
     }
     public function functionNameDelete(): bool
     {
-        return false;
+        return true;
     }
 }


360) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:44    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new ProfileNotFoundException($exception->getMessage());
+            new ProfileNotFoundException($exception->getMessage());
         }
     }
     /**


361) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:58    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $name);
         } catch (Exception $exception) {
-            throw new ProfileNotFoundException($exception->getMessage());
+            new ProfileNotFoundException($exception->getMessage());
         }
     }
     /**


362) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:73    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $filters);
         } catch (Exception $exception) {
-            throw new ProfilesNotFoundException($exception->getMessage());
+            new ProfilesNotFoundException($exception->getMessage());
         }
     }
     public function save(Profile $profile): void


363) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:77    [M] PublicVisibility

@@ @@
             throw new ProfilesNotFoundException($exception->getMessage());
         }
     }
-    public function save(Profile $profile): void
+    protected function save(Profile $profile): void
     {
         $this->persistence(__FUNCTION__, $profile);
     }


364) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:79    [M] MethodCallRemoval

@@ @@
     }
     public function save(Profile $profile): void
     {
-        $this->persistence(__FUNCTION__, $profile);
+        
     }
     public function update(ProfileId $id, Profile $profile): void
     {


365) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:82    [M] PublicVisibility

@@ @@
     {
         $this->persistence(__FUNCTION__, $profile);
     }
-    public function update(ProfileId $id, Profile $profile): void
+    protected function update(ProfileId $id, Profile $profile): void
     {
         $this->persistence(__FUNCTION__, $id, $profile);
     }


366) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:84    [M] MethodCallRemoval

@@ @@
     }
     public function update(ProfileId $id, Profile $profile): void
     {
-        $this->persistence(__FUNCTION__, $id, $profile);
+        
     }
     /**
      * @throws Throwable


367) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:92    [M] MethodCallRemoval

@@ @@
      */
     public function deleteProfile(ProfileId $id): void
     {
-        $this->write(__FUNCTION__, $id);
+        
     }
     public function persistProfile(Profile $profile): Profile
     {


368) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:100    [M] PublicVisibility

@@ @@
     {
         return $this->write(__FUNCTION__, $profile);
     }
-    public function persistProfiles(Profiles $profiles): Profiles
+    protected function persistProfiles(Profiles $profiles): Profiles
     {
         return $this->write(__FUNCTION__, $profiles);
     }


369) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:105    [M] PublicVisibility

@@ @@
     {
         return $this->write(__FUNCTION__, $profiles);
     }
-    public function functionNameDelete(): bool
+    protected function functionNameDelete(): bool
     {
         return false;
     }
 }


370) /var/www/abacusSystem-new/src/core/Profile/Infrastructure/Persistence/Repositories/ChainProfileRepository.php:107    [M] FalseValue

@@ @@
     }
     public function functionNameDelete(): bool
     {
-        return false;
+        return true;
     }
 }


371) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:20    [M] PublicVisibility

@@ @@
     /** @var ChainPriority[] */
     private array $repositories;
     abstract public function functionNamePersist(): string;
-    public function addRepository(ChainPriority $repository): self
+    protected function addRepository(ChainPriority $repository): self
     {
         $this->repositories[] = $repository;
         usort($this->repositories, $this->prioritySort());


372) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:24    [M] FunctionCallRemoval

@@ @@
     public function addRepository(ChainPriority $repository): self
     {
         $this->repositories[] = $repository;
-        usort($this->repositories, $this->prioritySort());
+        
         return $this;
     }
     protected function write(string $functionName, ...$source)


373) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:29    [M] ProtectedVisibility

@@ @@
         usort($this->repositories, $this->prioritySort());
         return $this;
     }
-    protected function write(string $functionName, ...$source)
+    private function write(string $functionName, ...$source)
     {
         $result = null;
         $repository = end($this->repositories);


374) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:34    [M] DoWhile

@@ @@
             if (is_callable($callable)) {
                 $result = call_user_func_array($callable, $source);
             }
-        } while (false !== $repository = prev($this->repositories));
+        } while (false);
         return $result;
     }
     /**


375) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:35    [M] ArrayItemRemoval

@@ @@
         $result = null;
         $repository = end($this->repositories);
         do {
-            $callable = [$repository, $functionName];
+            $callable = [$functionName];
             if (is_callable($callable)) {
                 $result = call_user_func_array($callable, $source);
             }


376) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:36    [M] IfNegation

@@ @@
         $repository = end($this->repositories);
         do {
             $callable = [$repository, $functionName];
-            if (is_callable($callable)) {
+            if (!is_callable($callable)) {
                 $result = call_user_func_array($callable, $source);
             }
         } while (false !== $repository = prev($this->repositories));


377) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:39    [M] FalseValue

@@ @@
             if (is_callable($callable)) {
                 $result = call_user_func_array($callable, $source);
             }
-        } while (false !== $repository = prev($this->repositories));
+        } while (true !== $repository = prev($this->repositories));
         return $result;
     }
     /**


378) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:39    [M] NotIdentical

@@ @@
             if (is_callable($callable)) {
                 $result = call_user_func_array($callable, $source);
             }
-        } while (false !== $repository = prev($this->repositories));
+        } while (false === $repository = prev($this->repositories));
         return $result;
     }
     /**


379) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:47    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Throwable
      */
-    protected function read(string $functionName, ...$source)
+    private function read(string $functionName, ...$source)
     {
         $result = $this->readFromRepositories($functionName, ...$source);
         if (!$this->functionNameDelete()) {


380) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:51    [M] LogicalNot

@@ @@
     protected function read(string $functionName, ...$source)
     {
         $result = $this->readFromRepositories($functionName, ...$source);
-        if (!$this->functionNameDelete()) {
+        if ($this->functionNameDelete()) {
             $this->persistence($this->functionNamePersist(), $result);
         }
         return $result;


381) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:52    [M] MethodCallRemoval

@@ @@
     {
         $result = $this->readFromRepositories($functionName, ...$source);
         if (!$this->functionNameDelete()) {
-            $this->persistence($this->functionNamePersist(), $result);
+            
         }
         return $result;
     }


382) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:61    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Throwable
      */
-    protected function readFromRepositories(string $functionName, ...$source)
+    private function readFromRepositories(string $functionName, ...$source)
     {
         $result = null;
         $lastThrowable = new SourceNotFoundException('Source not found');


383) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:67    [M] DoWhile

@@ @@
             } catch (Throwable $throwable) {
                 $lastThrowable = $throwable;
             }
-        } while (null === $result and false !== $repository = next($this->repositories));
+        } while (false);
         if (is_null($result)) {
             throw $lastThrowable;
         }


384) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:69    [M] ArrayItemRemoval

@@ @@
         $repository = reset($this->repositories);
         do {
             try {
-                $callable = [$repository, $functionName];
+                $callable = [$functionName];
                 if (is_callable($callable)) {
                     $result = call_user_func_array($callable, $source);
                 }


385) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:70    [M] IfNegation

@@ @@
         do {
             try {
                 $callable = [$repository, $functionName];
-                if (is_callable($callable)) {
+                if (!is_callable($callable)) {
                     $result = call_user_func_array($callable, $source);
                 }
             } catch (Throwable $throwable) {


386) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:76    [M] Identical

@@ @@
             } catch (Throwable $throwable) {
                 $lastThrowable = $throwable;
             }
-        } while (null === $result and false !== $repository = next($this->repositories));
+        } while (null !== $result and false !== $repository = next($this->repositories));
         if (is_null($result)) {
             throw $lastThrowable;
         }


387) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:76    [M] FalseValue

@@ @@
             } catch (Throwable $throwable) {
                 $lastThrowable = $throwable;
             }
-        } while (null === $result and false !== $repository = next($this->repositories));
+        } while (null === $result and true !== $repository = next($this->repositories));
         if (is_null($result)) {
             throw $lastThrowable;
         }


388) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:76    [M] NotIdentical

@@ @@
             } catch (Throwable $throwable) {
                 $lastThrowable = $throwable;
             }
-        } while (null === $result and false !== $repository = next($this->repositories));
+        } while (null === $result and false === $repository = next($this->repositories));
         if (is_null($result)) {
             throw $lastThrowable;
         }


389) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:76    [M] LogicalLowerAnd

@@ @@
             } catch (Throwable $throwable) {
                 $lastThrowable = $throwable;
             }
-        } while (null === $result and false !== $repository = next($this->repositories));
+        } while (null === $result or false !== $repository = next($this->repositories));
         if (is_null($result)) {
             throw $lastThrowable;
         }


390) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:78    [M] IfNegation

@@ @@
                 $lastThrowable = $throwable;
             }
         } while (null === $result and false !== $repository = next($this->repositories));
-        if (is_null($result)) {
+        if (!is_null($result)) {
             throw $lastThrowable;
         }
         return $result;


391) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:79    [M] Throw_

@@ @@
             }
         } while (null === $result and false !== $repository = next($this->repositories));
         if (is_null($result)) {
-            throw $lastThrowable;
+            $lastThrowable;
         }
         return $result;
     }


392) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:85    [M] ProtectedVisibility

@@ @@
         }
         return $result;
     }
-    protected function persistence(string $functionName, ...$sources): void
+    private function persistence(string $functionName, ...$sources): void
     {
         while (false !== $repository = prev($this->repositories)) {
             try {


393) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:87    [M] FalseValue

@@ @@
     }
     protected function persistence(string $functionName, ...$sources): void
     {
-        while (false !== $repository = prev($this->repositories)) {
+        while (true !== $repository = prev($this->repositories)) {
             try {
                 $callable = [$repository, $functionName];
                 if (is_callable($callable)) {


394) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:87    [M] NotIdentical

@@ @@
     }
     protected function persistence(string $functionName, ...$sources): void
     {
-        while (false !== $repository = prev($this->repositories)) {
+        while (false === $repository = prev($this->repositories)) {
             try {
                 $callable = [$repository, $functionName];
                 if (is_callable($callable)) {


395) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:87    [M] While_

@@ @@
     }
     protected function persistence(string $functionName, ...$sources): void
     {
-        while (false !== $repository = prev($this->repositories)) {
+        while (false) {
             try {
                 $callable = [$repository, $functionName];
                 if (is_callable($callable)) {


396) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:89    [M] ArrayItemRemoval

@@ @@
     {
         while (false !== $repository = prev($this->repositories)) {
             try {
-                $callable = [$repository, $functionName];
+                $callable = [$functionName];
                 if (is_callable($callable)) {
                     call_user_func_array($callable, $sources);
                 }


397) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:90    [M] IfNegation

@@ @@
         while (false !== $repository = prev($this->repositories)) {
             try {
                 $callable = [$repository, $functionName];
-                if (is_callable($callable)) {
+                if (!is_callable($callable)) {
                     call_user_func_array($callable, $sources);
                 }
             } catch (Exception $exception) {


398) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:91    [M] FunctionCallRemoval

@@ @@
             try {
                 $callable = [$repository, $functionName];
                 if (is_callable($callable)) {
-                    call_user_func_array($callable, $sources);
+                    
                 }
             } catch (Exception $exception) {
             }


399) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:101    [M] Identical

@@ @@
     private function prioritySort(): Closure
     {
         return static function (ChainPriority $current, ChainPriority $next) {
-            if ($current->priority() === $next->priority()) {
+            if ($current->priority() !== $next->priority()) {
                 return 0;
             }
             return ($current->priority() < $next->priority()) ? 1 : -1;


400) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:102    [M] DecrementInteger

@@ @@
     {
         return static function (ChainPriority $current, ChainPriority $next) {
             if ($current->priority() === $next->priority()) {
-                return 0;
+                return -1;
             }
             return ($current->priority() < $next->priority()) ? 1 : -1;
         };
     }
 }


401) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:102    [M] IncrementInteger

@@ @@
     {
         return static function (ChainPriority $current, ChainPriority $next) {
             if ($current->priority() === $next->priority()) {
-                return 0;
+                return 1;
             }
             return ($current->priority() < $next->priority()) ? 1 : -1;
         };
     }
 }


402) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] LessThan

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() <= $next->priority()) ? 1 : -1;
         };
     }
 }


403) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] LessThanNegotiation

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() >= $next->priority()) ? 1 : -1;
         };
     }
 }


404) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] DecrementInteger

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() < $next->priority()) ? 0 : -1;
         };
     }
 }


405) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] IncrementInteger

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() < $next->priority()) ? 2 : -1;
         };
     }
 }


406) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] DecrementInteger

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() < $next->priority()) ? 1 : -2;
         };
     }
 }


407) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] IncrementInteger

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() < $next->priority()) ? 1 : -0;
         };
     }
 }


408) /var/www/abacusSystem-new/src/core/SharedContext/Infrastructure/Persistence/AbstractChainRepository.php:105    [M] Ternary

@@ @@
             if ($current->priority() === $next->priority()) {
                 return 0;
             }
-            return ($current->priority() < $next->priority()) ? 1 : -1;
+            return ($current->priority() < $next->priority()) ? -1 : 1;
         };
     }
 }


409) /var/www/abacusSystem-new/src/core/SharedContext/Model/ArrayIterator.php:39    [M] FunctionCall

@@ @@
     #[ReturnTypeWillChange]
     public function next()
     {
-        return \next($this->items);
+        \next($this->items);
+        return null;
     }
     #[ReturnTypeWillChange]
     public function key()


410) /var/www/abacusSystem-new/src/core/SharedContext/Model/ArrayIterator.php:45    [M] FunctionCall

@@ @@
     #[ReturnTypeWillChange]
     public function key()
     {
-        return \key($this->items);
+        \key($this->items);
+        return null;
     }
     public function valid(): bool
     {


411) /var/www/abacusSystem-new/src/core/SharedContext/Model/ArrayIterator.php:50    [M] FalseValue

@@ @@
     }
     public function valid(): bool
     {
-        return \current($this->items) !== false;
+        return \current($this->items) !== true;
     }
     #[ReturnTypeWillChange]
     public function rewind()


412) /var/www/abacusSystem-new/src/core/SharedContext/Model/ArrayIterator.php:50    [M] NotIdentical

@@ @@
     }
     public function valid(): bool
     {
-        return \current($this->items) !== false;
+        return \current($this->items) === false;
     }
     #[ReturnTypeWillChange]
     public function rewind()


413) /var/www/abacusSystem-new/src/core/SharedContext/Model/ArrayIterator.php:56    [M] FunctionCall

@@ @@
     #[ReturnTypeWillChange]
     public function rewind()
     {
-        return \reset($this->items);
+        \reset($this->items);
+        return null;
     }
     public function count(): int
     {


414) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:53    [M] MethodCallRemoval

@@ @@
      */
     public function __construct(int $value)
     {
-        $this->validateState($value);
+        
         $this->value = $value;
         $this->changeValueLiteral($value);
     }


415) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:56    [M] MethodCallRemoval

@@ @@
     {
         $this->validateState($value);
         $this->value = $value;
-        $this->changeValueLiteral($value);
+        
     }
     public function value(): int
     {


416) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:71    [M] MethodCallRemoval

@@ @@
      */
     public function setValue($value): self
     {
-        $this->validateState($value);
+        
         $this->value = $value;
         return $this;
     }


417) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:78    [M] PublicVisibility

@@ @@
         $this->value = $value;
         return $this;
     }
-    public function getValueLiteral(): string
+    protected function getValueLiteral(): string
     {
         return $this->valueLiteral;
     }


418) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:83    [M] PublicVisibility

@@ @@
     {
         return $this->valueLiteral;
     }
-    public function activate(): self
+    protected function activate(): self
     {
         $this->value = self::STATE_ACTIVE;
         $this->changeValueLiteral(self::STATE_INACTIVE);


419) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:86    [M] MethodCallRemoval

@@ @@
     public function activate(): self
     {
         $this->value = self::STATE_ACTIVE;
-        $this->changeValueLiteral(self::STATE_INACTIVE);
+        
         return $this;
     }
     public function inactive(): self


420) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:91    [M] PublicVisibility

@@ @@
         $this->changeValueLiteral(self::STATE_INACTIVE);
         return $this;
     }
-    public function inactive(): self
+    protected function inactive(): self
     {
         $this->value = self::STATE_INACTIVE;
         $this->changeValueLiteral(self::STATE_INACTIVE);


421) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:94    [M] MethodCallRemoval

@@ @@
     public function inactive(): self
     {
         $this->value = self::STATE_INACTIVE;
-        $this->changeValueLiteral(self::STATE_INACTIVE);
+        
         return $this;
     }
     public function isNew(): bool


422) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:99    [M] PublicVisibility

@@ @@
         $this->changeValueLiteral(self::STATE_INACTIVE);
         return $this;
     }
-    public function isNew(): bool
+    protected function isNew(): bool
     {
         return $this->value() === self::STATE_NEW;
     }


423) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:101    [M] Identical

@@ @@
     }
     public function isNew(): bool
     {
-        return $this->value() === self::STATE_NEW;
+        return $this->value() !== self::STATE_NEW;
     }
     public function isActivated(): bool
     {


424) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:104    [M] PublicVisibility

@@ @@
     {
         return $this->value() === self::STATE_NEW;
     }
-    public function isActivated(): bool
+    protected function isActivated(): bool
     {
         return $this->value() === self::STATE_ACTIVE;
     }


425) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:106    [M] Identical

@@ @@
     }
     public function isActivated(): bool
     {
-        return $this->value() === self::STATE_ACTIVE;
+        return $this->value() !== self::STATE_ACTIVE;
     }
     public function isInactivated(): bool
     {


426) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:109    [M] PublicVisibility

@@ @@
     {
         return $this->value() === self::STATE_ACTIVE;
     }
-    public function isInactivated(): bool
+    protected function isInactivated(): bool
     {
         return $this->value() === self::STATE_INACTIVE;
     }


427) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:111    [M] Identical

@@ @@
     }
     public function isInactivated(): bool
     {
-        return $this->value() === self::STATE_INACTIVE;
+        return $this->value() !== self::STATE_INACTIVE;
     }
     public function formatHtmlToState(): string
     {


428) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:114    [M] PublicVisibility

@@ @@
     {
         return $this->value() === self::STATE_INACTIVE;
     }
-    public function formatHtmlToState(): string
+    protected function formatHtmlToState(): string
     {
         $state = $this->value;
         $style = self::STYLE_LITERAL_STATE[$state];


429) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:122    [M] ProtectedVisibility

@@ @@
         $style = self::STYLE_LITERAL_STATE[$state];
         return sprintf('<span class="badge %s">%s</span>', $style['class'], $this->valueLiteral);
     }
-    protected function changeValueLiteral(int $state): self
+    private function changeValueLiteral(int $state): self
     {
         if ($state !== self::STATE_DELETE) {
             $literal = self::STYLE_LITERAL_STATE[$state]['literal'];


430) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:124    [M] NotIdentical

@@ @@
     }
     protected function changeValueLiteral(int $state): self
     {
-        if ($state !== self::STATE_DELETE) {
+        if ($state === self::STATE_DELETE) {
             $literal = self::STYLE_LITERAL_STATE[$state]['literal'];
             $this->valueLiteral = $literal;
         }


431) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:135    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Exception
      */
-    protected function validateState(int $value): void
+    private function validateState(int $value): void
     {
         if (!in_array($value, self::REGISTRY_STATES)) {
             throw new Exception(sprintf('<%s> does not allow the invalid state: <%s>.', static::class, $value));


432) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:137    [M] LogicalNot

@@ @@
      */
     protected function validateState(int $value): void
     {
-        if (!in_array($value, self::REGISTRY_STATES)) {
+        if (in_array($value, self::REGISTRY_STATES)) {
             throw new Exception(sprintf('<%s> does not allow the invalid state: <%s>.', static::class, $value));
         }
     }
 }


433) /var/www/abacusSystem-new/src/core/SharedContext/Model/ValueObjectStatus.php:138    [M] Throw_

@@ @@
     protected function validateState(int $value): void
     {
         if (!in_array($value, self::REGISTRY_STATES)) {
-            throw new Exception(sprintf('<%s> does not allow the invalid state: <%s>.', static::class, $value));
+            new Exception(sprintf('<%s> does not allow the invalid state: <%s>.', static::class, $value));
         }
     }
 }


434) /var/www/abacusSystem-new/src/core/User/Application/UseCases/UseCasesService.php:29    [M] ProtectedVisibility

@@ @@
     /**
      * @throws Exception
      */
-    protected function validateRequest(RequestService $request, string $requestClass): RequestService
+    private function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
             throw new Exception('Request not valid');


435) /var/www/abacusSystem-new/src/core/User/Application/UseCases/UseCasesService.php:31    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!true) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


436) /var/www/abacusSystem-new/src/core/User/Application/UseCases/UseCasesService.php:31    [M] InstanceOf_

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if (!false) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


437) /var/www/abacusSystem-new/src/core/User/Application/UseCases/UseCasesService.php:31    [M] LogicalNot

@@ @@
      */
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
-        if (!$request instanceof $requestClass) {
+        if ($request instanceof $requestClass) {
             throw new Exception('Request not valid');
         }
         return $request;
     }
 }


438) /var/www/abacusSystem-new/src/core/User/Application/UseCases/UseCasesService.php:32    [M] Throw_

@@ @@
     protected function validateRequest(RequestService $request, string $requestClass): RequestService
     {
         if (!$request instanceof $requestClass) {
-            throw new Exception('Request not valid');
+            new Exception('Request not valid');
         }
         return $request;
     }
 }


439) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:44    [M] Concat

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by id ' . $id->value());
+            throw new UserNotFoundException($id->value() . 'User not found by id ');
         }
     }
     /**


440) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:44    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by id ' . $id->value());
+            throw new UserNotFoundException($id->value());
         }
     }
     /**


441) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:44    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by id ' . $id->value());
+            throw new UserNotFoundException('User not found by id ');
         }
     }
     /**


442) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:44    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $id);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by id ' . $id->value());
+            new UserNotFoundException('User not found by id ' . $id->value());
         }
     }
     /**


443) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:58    [M] Concat

@@ @@
         try {
             return $this->read(__FUNCTION__, $login);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by login ' . $login->value());
+            throw new UserNotFoundException($login->value() . 'User not found by login ');
         }
     }
     /**


444) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:58    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $login);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by login ' . $login->value());
+            throw new UserNotFoundException($login->value());
         }
     }
     /**


445) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:58    [M] ConcatOperandRemoval

@@ @@
         try {
             return $this->read(__FUNCTION__, $login);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by login ' . $login->value());
+            throw new UserNotFoundException('User not found by login ');
         }
     }
     /**


446) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:58    [M] Throw_

@@ @@
         try {
             return $this->read(__FUNCTION__, $login);
         } catch (Exception $exception) {
-            throw new UserNotFoundException('User not found by login ' . $login->value());
+            new UserNotFoundException('User not found by login ' . $login->value());
         }
     }
     /**


447) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:67    [M] MethodCallRemoval

@@ @@
      */
     public function delete(UserId $id): void
     {
-        $this->write(__FUNCTION__, $id);
+        
     }
     public function persistUser(User $user): User
     {


448) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:77    [M] PublicVisibility

@@ @@
         $this->domainToPersist = User::class;
         return $this->write(__FUNCTION__, $user);
     }
-    public function functionNameDelete(): bool
+    protected function functionNameDelete(): bool
     {
         return false;
     }
 }


449) /var/www/abacusSystem-new/src/core/User/Infrastructure/Persistence/Repositories/ChainUserRepository.php:79    [M] FalseValue

@@ @@
     }
     public function functionNameDelete(): bool
     {
-        return false;
+        return true;
     }
 }
